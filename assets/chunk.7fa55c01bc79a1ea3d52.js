"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcrates_io"] = self["webpackChunkcrates_io"] || []).push([["vendors-_pnpm_mermaid_10_9_1_node_modules_mermaid_dist_blockDiagram-9f4a6865_js"],{

/***/ "../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/methods/channel.js":
/*!****************************************************************************!*\
  !*** ../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/methods/channel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ \"../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/utils/index.js\");\n/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../color/index.js */ \"../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/color/index.js\");\n/* IMPORT */\n\n\n/* MAIN */\nconst channel = (color, channel) => {\n  return _utils_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lang.round(_color_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].parse(color)[channel]);\n};\n/* EXPORT */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (channel);\n\n//# sourceURL=webpack://crates-io/../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/methods/channel.js?");

/***/ }),

/***/ "../../.pnpm/lodash-es@4.17.21/node_modules/lodash-es/clone.js":
/*!*********************************************************************!*\
  !*** ../../.pnpm/lodash-es@4.17.21/node_modules/lodash-es/clone.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseClone.js */ \"../../.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js\");\n\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value, CLONE_SYMBOLS_FLAG);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clone);\n\n//# sourceURL=webpack://crates-io/../../.pnpm/lodash-es@4.17.21/node_modules/lodash-es/clone.js?");

/***/ }),

/***/ "../../.pnpm/mermaid@10.9.1/node_modules/mermaid/dist/blockDiagram-9f4a6865.js":
/*!*************************************************************************************!*\
  !*** ../../.pnpm/mermaid@10.9.1/node_modules/mermaid/dist/blockDiagram-9f4a6865.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: () => (/* binding */ diagram)\n/* harmony export */ });\n/* harmony import */ var _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mermaid-6dc72991.js */ \"../../.pnpm/mermaid@10.9.1/node_modules/mermaid/dist/mermaid-6dc72991.js\");\n/* harmony import */ var lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/clone.js */ \"../../.pnpm/lodash-es@4.17.21/node_modules/lodash-es/clone.js\");\n/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! khroma */ \"../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/methods/channel.js\");\n/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! khroma */ \"../../.pnpm/khroma@2.1.0/node_modules/khroma/dist/methods/rgba.js\");\n/* harmony import */ var _edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./edges-066a5561.js */ \"../../.pnpm/mermaid@10.9.1/node_modules/mermaid/dist/edges-066a5561.js\");\n/* harmony import */ var dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dagre-d3-es/src/graphlib/index.js */ \"../../.pnpm/dagre-d3-es@7.0.10/node_modules/dagre-d3-es/src/graphlib/index.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ \"../../.pnpm/d3@7.9.0/node_modules/d3/src/index.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ts-dedent */ \"../../.pnpm/ts-dedent@2.2.0/node_modules/ts-dedent/esm/index.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dayjs */ \"../../.pnpm/dayjs@1.11.12/node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @braintree/sanitize-url */ \"../../.pnpm/@braintree+sanitize-url@6.0.4/node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! dompurify */ \"../../.pnpm/dompurify@3.1.6/node_modules/dompurify/dist/purify.js\");\nvar _a, _b;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar parser = function () {\n  var o = function (k, v, o2, l) {\n      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v);\n      return o2;\n    },\n    $V0 = [1, 7],\n    $V1 = [1, 13],\n    $V2 = [1, 14],\n    $V3 = [1, 15],\n    $V4 = [1, 19],\n    $V5 = [1, 16],\n    $V6 = [1, 17],\n    $V7 = [1, 18],\n    $V8 = [8, 30],\n    $V9 = [8, 21, 28, 29, 30, 31, 32, 40, 44, 47],\n    $Va = [1, 23],\n    $Vb = [1, 24],\n    $Vc = [8, 15, 16, 21, 28, 29, 30, 31, 32, 40, 44, 47],\n    $Vd = [8, 15, 16, 21, 27, 28, 29, 30, 31, 32, 40, 44, 47],\n    $Ve = [1, 49];\n  var parser2 = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"spaceLines\": 3,\n      \"SPACELINE\": 4,\n      \"NL\": 5,\n      \"separator\": 6,\n      \"SPACE\": 7,\n      \"EOF\": 8,\n      \"start\": 9,\n      \"BLOCK_DIAGRAM_KEY\": 10,\n      \"document\": 11,\n      \"stop\": 12,\n      \"statement\": 13,\n      \"link\": 14,\n      \"LINK\": 15,\n      \"START_LINK\": 16,\n      \"LINK_LABEL\": 17,\n      \"STR\": 18,\n      \"nodeStatement\": 19,\n      \"columnsStatement\": 20,\n      \"SPACE_BLOCK\": 21,\n      \"blockStatement\": 22,\n      \"classDefStatement\": 23,\n      \"cssClassStatement\": 24,\n      \"styleStatement\": 25,\n      \"node\": 26,\n      \"SIZE\": 27,\n      \"COLUMNS\": 28,\n      \"id-block\": 29,\n      \"end\": 30,\n      \"block\": 31,\n      \"NODE_ID\": 32,\n      \"nodeShapeNLabel\": 33,\n      \"dirList\": 34,\n      \"DIR\": 35,\n      \"NODE_DSTART\": 36,\n      \"NODE_DEND\": 37,\n      \"BLOCK_ARROW_START\": 38,\n      \"BLOCK_ARROW_END\": 39,\n      \"classDef\": 40,\n      \"CLASSDEF_ID\": 41,\n      \"CLASSDEF_STYLEOPTS\": 42,\n      \"DEFAULT\": 43,\n      \"class\": 44,\n      \"CLASSENTITY_IDS\": 45,\n      \"STYLECLASS\": 46,\n      \"style\": 47,\n      \"STYLE_ENTITY_IDS\": 48,\n      \"STYLE_DEFINITION_DATA\": 49,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      4: \"SPACELINE\",\n      5: \"NL\",\n      7: \"SPACE\",\n      8: \"EOF\",\n      10: \"BLOCK_DIAGRAM_KEY\",\n      15: \"LINK\",\n      16: \"START_LINK\",\n      17: \"LINK_LABEL\",\n      18: \"STR\",\n      21: \"SPACE_BLOCK\",\n      27: \"SIZE\",\n      28: \"COLUMNS\",\n      29: \"id-block\",\n      30: \"end\",\n      31: \"block\",\n      32: \"NODE_ID\",\n      35: \"DIR\",\n      36: \"NODE_DSTART\",\n      37: \"NODE_DEND\",\n      38: \"BLOCK_ARROW_START\",\n      39: \"BLOCK_ARROW_END\",\n      40: \"classDef\",\n      41: \"CLASSDEF_ID\",\n      42: \"CLASSDEF_STYLEOPTS\",\n      43: \"DEFAULT\",\n      44: \"class\",\n      45: \"CLASSENTITY_IDS\",\n      46: \"STYLECLASS\",\n      47: \"style\",\n      48: \"STYLE_ENTITY_IDS\",\n      49: \"STYLE_DEFINITION_DATA\"\n    },\n    productions_: [0, [3, 1], [3, 2], [3, 2], [6, 1], [6, 1], [6, 1], [9, 3], [12, 1], [12, 1], [12, 2], [12, 2], [11, 1], [11, 2], [14, 1], [14, 4], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [19, 3], [19, 2], [19, 1], [20, 1], [22, 4], [22, 3], [26, 1], [26, 2], [34, 1], [34, 2], [33, 3], [33, 4], [23, 3], [23, 3], [24, 3], [25, 3]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 4:\n          yy.getLogger().debug(\"Rule: separator (NL) \");\n          break;\n        case 5:\n          yy.getLogger().debug(\"Rule: separator (Space) \");\n          break;\n        case 6:\n          yy.getLogger().debug(\"Rule: separator (EOF) \");\n          break;\n        case 7:\n          yy.getLogger().debug(\"Rule: hierarchy: \", $$[$0 - 1]);\n          yy.setHierarchy($$[$0 - 1]);\n          break;\n        case 8:\n          yy.getLogger().debug(\"Stop NL \");\n          break;\n        case 9:\n          yy.getLogger().debug(\"Stop EOF \");\n          break;\n        case 10:\n          yy.getLogger().debug(\"Stop NL2 \");\n          break;\n        case 11:\n          yy.getLogger().debug(\"Stop EOF2 \");\n          break;\n        case 12:\n          yy.getLogger().debug(\"Rule: statement: \", $$[$0]);\n          typeof $$[$0].length === \"number\" ? this.$ = $$[$0] : this.$ = [$$[$0]];\n          break;\n        case 13:\n          yy.getLogger().debug(\"Rule: statement #2: \", $$[$0 - 1]);\n          this.$ = [$$[$0 - 1]].concat($$[$0]);\n          break;\n        case 14:\n          yy.getLogger().debug(\"Rule: link: \", $$[$0], yytext);\n          this.$ = {\n            edgeTypeStr: $$[$0],\n            label: \"\"\n          };\n          break;\n        case 15:\n          yy.getLogger().debug(\"Rule: LABEL link: \", $$[$0 - 3], $$[$0 - 1], $$[$0]);\n          this.$ = {\n            edgeTypeStr: $$[$0],\n            label: $$[$0 - 1]\n          };\n          break;\n        case 18:\n          const num = parseInt($$[$0]);\n          const spaceId = yy.generateId();\n          this.$ = {\n            id: spaceId,\n            type: \"space\",\n            label: \"\",\n            width: num,\n            children: []\n          };\n          break;\n        case 23:\n          yy.getLogger().debug(\"Rule: (nodeStatement link node) \", $$[$0 - 2], $$[$0 - 1], $$[$0], \" typestr: \", $$[$0 - 1].edgeTypeStr);\n          const edgeData = yy.edgeStrToEdgeData($$[$0 - 1].edgeTypeStr);\n          this.$ = [{\n            id: $$[$0 - 2].id,\n            label: $$[$0 - 2].label,\n            type: $$[$0 - 2].type,\n            directions: $$[$0 - 2].directions\n          }, {\n            id: $$[$0 - 2].id + \"-\" + $$[$0].id,\n            start: $$[$0 - 2].id,\n            end: $$[$0].id,\n            label: $$[$0 - 1].label,\n            type: \"edge\",\n            directions: $$[$0].directions,\n            arrowTypeEnd: edgeData,\n            arrowTypeStart: \"arrow_open\"\n          }, {\n            id: $$[$0].id,\n            label: $$[$0].label,\n            type: yy.typeStr2Type($$[$0].typeStr),\n            directions: $$[$0].directions\n          }];\n          break;\n        case 24:\n          yy.getLogger().debug(\"Rule: nodeStatement (abc88 node size) \", $$[$0 - 1], $$[$0]);\n          this.$ = {\n            id: $$[$0 - 1].id,\n            label: $$[$0 - 1].label,\n            type: yy.typeStr2Type($$[$0 - 1].typeStr),\n            directions: $$[$0 - 1].directions,\n            widthInColumns: parseInt($$[$0], 10)\n          };\n          break;\n        case 25:\n          yy.getLogger().debug(\"Rule: nodeStatement (node) \", $$[$0]);\n          this.$ = {\n            id: $$[$0].id,\n            label: $$[$0].label,\n            type: yy.typeStr2Type($$[$0].typeStr),\n            directions: $$[$0].directions,\n            widthInColumns: 1\n          };\n          break;\n        case 26:\n          yy.getLogger().debug(\"APA123\", this ? this : \"na\");\n          yy.getLogger().debug(\"COLUMNS: \", $$[$0]);\n          this.$ = {\n            type: \"column-setting\",\n            columns: $$[$0] === \"auto\" ? -1 : parseInt($$[$0])\n          };\n          break;\n        case 27:\n          yy.getLogger().debug(\"Rule: id-block statement : \", $$[$0 - 2], $$[$0 - 1]);\n          yy.generateId();\n          this.$ = {\n            ...$$[$0 - 2],\n            type: \"composite\",\n            children: $$[$0 - 1]\n          };\n          break;\n        case 28:\n          yy.getLogger().debug(\"Rule: blockStatement : \", $$[$0 - 2], $$[$0 - 1], $$[$0]);\n          const id = yy.generateId();\n          this.$ = {\n            id,\n            type: \"composite\",\n            label: \"\",\n            children: $$[$0 - 1]\n          };\n          break;\n        case 29:\n          yy.getLogger().debug(\"Rule: node (NODE_ID separator): \", $$[$0]);\n          this.$ = {\n            id: $$[$0]\n          };\n          break;\n        case 30:\n          yy.getLogger().debug(\"Rule: node (NODE_ID nodeShapeNLabel separator): \", $$[$0 - 1], $$[$0]);\n          this.$ = {\n            id: $$[$0 - 1],\n            label: $$[$0].label,\n            typeStr: $$[$0].typeStr,\n            directions: $$[$0].directions\n          };\n          break;\n        case 31:\n          yy.getLogger().debug(\"Rule: dirList: \", $$[$0]);\n          this.$ = [$$[$0]];\n          break;\n        case 32:\n          yy.getLogger().debug(\"Rule: dirList: \", $$[$0 - 1], $$[$0]);\n          this.$ = [$$[$0 - 1]].concat($$[$0]);\n          break;\n        case 33:\n          yy.getLogger().debug(\"Rule: nodeShapeNLabel: \", $$[$0 - 2], $$[$0 - 1], $$[$0]);\n          this.$ = {\n            typeStr: $$[$0 - 2] + $$[$0],\n            label: $$[$0 - 1]\n          };\n          break;\n        case 34:\n          yy.getLogger().debug(\"Rule: BLOCK_ARROW nodeShapeNLabel: \", $$[$0 - 3], $$[$0 - 2], \" #3:\", $$[$0 - 1], $$[$0]);\n          this.$ = {\n            typeStr: $$[$0 - 3] + $$[$0],\n            label: $$[$0 - 2],\n            directions: $$[$0 - 1]\n          };\n          break;\n        case 35:\n        case 36:\n          this.$ = {\n            type: \"classDef\",\n            id: $$[$0 - 1].trim(),\n            css: $$[$0].trim()\n          };\n          break;\n        case 37:\n          this.$ = {\n            type: \"applyClass\",\n            id: $$[$0 - 1].trim(),\n            styleClass: $$[$0].trim()\n          };\n          break;\n        case 38:\n          this.$ = {\n            type: \"applyStyles\",\n            id: $$[$0 - 1].trim(),\n            stylesStr: $$[$0].trim()\n          };\n          break;\n      }\n    },\n    table: [{\n      9: 1,\n      10: [1, 2]\n    }, {\n      1: [3]\n    }, {\n      11: 3,\n      13: 4,\n      19: 5,\n      20: 6,\n      21: $V0,\n      22: 8,\n      23: 9,\n      24: 10,\n      25: 11,\n      26: 12,\n      28: $V1,\n      29: $V2,\n      31: $V3,\n      32: $V4,\n      40: $V5,\n      44: $V6,\n      47: $V7\n    }, {\n      8: [1, 20]\n    }, o($V8, [2, 12], {\n      13: 4,\n      19: 5,\n      20: 6,\n      22: 8,\n      23: 9,\n      24: 10,\n      25: 11,\n      26: 12,\n      11: 21,\n      21: $V0,\n      28: $V1,\n      29: $V2,\n      31: $V3,\n      32: $V4,\n      40: $V5,\n      44: $V6,\n      47: $V7\n    }), o($V9, [2, 16], {\n      14: 22,\n      15: $Va,\n      16: $Vb\n    }), o($V9, [2, 17]), o($V9, [2, 18]), o($V9, [2, 19]), o($V9, [2, 20]), o($V9, [2, 21]), o($V9, [2, 22]), o($Vc, [2, 25], {\n      27: [1, 25]\n    }), o($V9, [2, 26]), {\n      19: 26,\n      26: 12,\n      32: $V4\n    }, {\n      11: 27,\n      13: 4,\n      19: 5,\n      20: 6,\n      21: $V0,\n      22: 8,\n      23: 9,\n      24: 10,\n      25: 11,\n      26: 12,\n      28: $V1,\n      29: $V2,\n      31: $V3,\n      32: $V4,\n      40: $V5,\n      44: $V6,\n      47: $V7\n    }, {\n      41: [1, 28],\n      43: [1, 29]\n    }, {\n      45: [1, 30]\n    }, {\n      48: [1, 31]\n    }, o($Vd, [2, 29], {\n      33: 32,\n      36: [1, 33],\n      38: [1, 34]\n    }), {\n      1: [2, 7]\n    }, o($V8, [2, 13]), {\n      26: 35,\n      32: $V4\n    }, {\n      32: [2, 14]\n    }, {\n      17: [1, 36]\n    }, o($Vc, [2, 24]), {\n      11: 37,\n      13: 4,\n      14: 22,\n      15: $Va,\n      16: $Vb,\n      19: 5,\n      20: 6,\n      21: $V0,\n      22: 8,\n      23: 9,\n      24: 10,\n      25: 11,\n      26: 12,\n      28: $V1,\n      29: $V2,\n      31: $V3,\n      32: $V4,\n      40: $V5,\n      44: $V6,\n      47: $V7\n    }, {\n      30: [1, 38]\n    }, {\n      42: [1, 39]\n    }, {\n      42: [1, 40]\n    }, {\n      46: [1, 41]\n    }, {\n      49: [1, 42]\n    }, o($Vd, [2, 30]), {\n      18: [1, 43]\n    }, {\n      18: [1, 44]\n    }, o($Vc, [2, 23]), {\n      18: [1, 45]\n    }, {\n      30: [1, 46]\n    }, o($V9, [2, 28]), o($V9, [2, 35]), o($V9, [2, 36]), o($V9, [2, 37]), o($V9, [2, 38]), {\n      37: [1, 47]\n    }, {\n      34: 48,\n      35: $Ve\n    }, {\n      15: [1, 50]\n    }, o($V9, [2, 27]), o($Vd, [2, 33]), {\n      39: [1, 51]\n    }, {\n      34: 52,\n      35: $Ve,\n      39: [2, 31]\n    }, {\n      32: [2, 15]\n    }, o($Vd, [2, 34]), {\n      39: [2, 32]\n    }],\n    defaultActions: {\n      20: [2, 7],\n      23: [2, 14],\n      50: [2, 15],\n      52: [2, 32]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n        stack = [0],\n        tstack = [],\n        vstack = [null],\n        lstack = [],\n        table = this.table,\n        yytext = \"\",\n        yylineno = 0,\n        yyleng = 0,\n        TERROR = 2,\n        EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol,\n        state,\n        action,\n        r,\n        yyval = {},\n        p,\n        len,\n        newState,\n        expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function () {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function () {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function () {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function (n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function (match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function () {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 10;\n          case 1:\n            yy.getLogger().debug(\"Found space-block\");\n            return 31;\n          case 2:\n            yy.getLogger().debug(\"Found nl-block\");\n            return 31;\n          case 3:\n            yy.getLogger().debug(\"Found space-block\");\n            return 29;\n          case 4:\n            yy.getLogger().debug(\".\", yy_.yytext);\n            break;\n          case 5:\n            yy.getLogger().debug(\"_\", yy_.yytext);\n            break;\n          case 6:\n            return 5;\n          case 7:\n            yy_.yytext = -1;\n            return 28;\n          case 8:\n            yy_.yytext = yy_.yytext.replace(/columns\\s+/, \"\");\n            yy.getLogger().debug(\"COLUMNS (LEX)\", yy_.yytext);\n            return 28;\n          case 9:\n            this.pushState(\"md_string\");\n            break;\n          case 10:\n            return \"MD_STR\";\n          case 11:\n            this.popState();\n            break;\n          case 12:\n            this.pushState(\"string\");\n            break;\n          case 13:\n            yy.getLogger().debug(\"LEX: POPPING STR:\", yy_.yytext);\n            this.popState();\n            break;\n          case 14:\n            yy.getLogger().debug(\"LEX: STR end:\", yy_.yytext);\n            return \"STR\";\n          case 15:\n            yy_.yytext = yy_.yytext.replace(/space\\:/, \"\");\n            yy.getLogger().debug(\"SPACE NUM (LEX)\", yy_.yytext);\n            return 21;\n          case 16:\n            yy_.yytext = \"1\";\n            yy.getLogger().debug(\"COLUMNS (LEX)\", yy_.yytext);\n            return 21;\n          case 17:\n            return 43;\n          case 18:\n            return \"LINKSTYLE\";\n          case 19:\n            return \"INTERPOLATE\";\n          case 20:\n            this.pushState(\"CLASSDEF\");\n            return 40;\n          case 21:\n            this.popState();\n            this.pushState(\"CLASSDEFID\");\n            return \"DEFAULT_CLASSDEF_ID\";\n          case 22:\n            this.popState();\n            this.pushState(\"CLASSDEFID\");\n            return 41;\n          case 23:\n            this.popState();\n            return 42;\n          case 24:\n            this.pushState(\"CLASS\");\n            return 44;\n          case 25:\n            this.popState();\n            this.pushState(\"CLASS_STYLE\");\n            return 45;\n          case 26:\n            this.popState();\n            return 46;\n          case 27:\n            this.pushState(\"STYLE_STMNT\");\n            return 47;\n          case 28:\n            this.popState();\n            this.pushState(\"STYLE_DEFINITION\");\n            return 48;\n          case 29:\n            this.popState();\n            return 49;\n          case 30:\n            this.pushState(\"acc_title\");\n            return \"acc_title\";\n          case 31:\n            this.popState();\n            return \"acc_title_value\";\n          case 32:\n            this.pushState(\"acc_descr\");\n            return \"acc_descr\";\n          case 33:\n            this.popState();\n            return \"acc_descr_value\";\n          case 34:\n            this.pushState(\"acc_descr_multiline\");\n            break;\n          case 35:\n            this.popState();\n            break;\n          case 36:\n            return \"acc_descr_multiline_value\";\n          case 37:\n            return 30;\n          case 38:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ((\");\n            return \"NODE_DEND\";\n          case 39:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ((\");\n            return \"NODE_DEND\";\n          case 40:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ))\");\n            return \"NODE_DEND\";\n          case 41:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ((\");\n            return \"NODE_DEND\";\n          case 42:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ((\");\n            return \"NODE_DEND\";\n          case 43:\n            this.popState();\n            yy.getLogger().debug(\"Lex: (-\");\n            return \"NODE_DEND\";\n          case 44:\n            this.popState();\n            yy.getLogger().debug(\"Lex: -)\");\n            return \"NODE_DEND\";\n          case 45:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ((\");\n            return \"NODE_DEND\";\n          case 46:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ]]\");\n            return \"NODE_DEND\";\n          case 47:\n            this.popState();\n            yy.getLogger().debug(\"Lex: (\");\n            return \"NODE_DEND\";\n          case 48:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ])\");\n            return \"NODE_DEND\";\n          case 49:\n            this.popState();\n            yy.getLogger().debug(\"Lex: /]\");\n            return \"NODE_DEND\";\n          case 50:\n            this.popState();\n            yy.getLogger().debug(\"Lex: /]\");\n            return \"NODE_DEND\";\n          case 51:\n            this.popState();\n            yy.getLogger().debug(\"Lex: )]\");\n            return \"NODE_DEND\";\n          case 52:\n            this.popState();\n            yy.getLogger().debug(\"Lex: )\");\n            return \"NODE_DEND\";\n          case 53:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ]>\");\n            return \"NODE_DEND\";\n          case 54:\n            this.popState();\n            yy.getLogger().debug(\"Lex: ]\");\n            return \"NODE_DEND\";\n          case 55:\n            yy.getLogger().debug(\"Lexa: -)\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 56:\n            yy.getLogger().debug(\"Lexa: (-\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 57:\n            yy.getLogger().debug(\"Lexa: ))\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 58:\n            yy.getLogger().debug(\"Lexa: )\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 59:\n            yy.getLogger().debug(\"Lex: (((\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 60:\n            yy.getLogger().debug(\"Lexa: )\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 61:\n            yy.getLogger().debug(\"Lexa: )\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 62:\n            yy.getLogger().debug(\"Lexa: )\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 63:\n            yy.getLogger().debug(\"Lexc: >\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 64:\n            yy.getLogger().debug(\"Lexa: ([\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 65:\n            yy.getLogger().debug(\"Lexa: )\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 66:\n            this.pushState(\"NODE\");\n            return 36;\n          case 67:\n            this.pushState(\"NODE\");\n            return 36;\n          case 68:\n            this.pushState(\"NODE\");\n            return 36;\n          case 69:\n            this.pushState(\"NODE\");\n            return 36;\n          case 70:\n            this.pushState(\"NODE\");\n            return 36;\n          case 71:\n            this.pushState(\"NODE\");\n            return 36;\n          case 72:\n            this.pushState(\"NODE\");\n            return 36;\n          case 73:\n            yy.getLogger().debug(\"Lexa: [\");\n            this.pushState(\"NODE\");\n            return 36;\n          case 74:\n            this.pushState(\"BLOCK_ARROW\");\n            yy.getLogger().debug(\"LEX ARR START\");\n            return 38;\n          case 75:\n            yy.getLogger().debug(\"Lex: NODE_ID\", yy_.yytext);\n            return 32;\n          case 76:\n            yy.getLogger().debug(\"Lex: EOF\", yy_.yytext);\n            return 8;\n          case 77:\n            this.pushState(\"md_string\");\n            break;\n          case 78:\n            this.pushState(\"md_string\");\n            break;\n          case 79:\n            return \"NODE_DESCR\";\n          case 80:\n            this.popState();\n            break;\n          case 81:\n            yy.getLogger().debug(\"Lex: Starting string\");\n            this.pushState(\"string\");\n            break;\n          case 82:\n            yy.getLogger().debug(\"LEX ARR: Starting string\");\n            this.pushState(\"string\");\n            break;\n          case 83:\n            yy.getLogger().debug(\"LEX: NODE_DESCR:\", yy_.yytext);\n            return \"NODE_DESCR\";\n          case 84:\n            yy.getLogger().debug(\"LEX POPPING\");\n            this.popState();\n            break;\n          case 85:\n            yy.getLogger().debug(\"Lex: =>BAE\");\n            this.pushState(\"ARROW_DIR\");\n            break;\n          case 86:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (right): dir:\", yy_.yytext);\n            return \"DIR\";\n          case 87:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (left):\", yy_.yytext);\n            return \"DIR\";\n          case 88:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (x):\", yy_.yytext);\n            return \"DIR\";\n          case 89:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (y):\", yy_.yytext);\n            return \"DIR\";\n          case 90:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (up):\", yy_.yytext);\n            return \"DIR\";\n          case 91:\n            yy_.yytext = yy_.yytext.replace(/^,\\s*/, \"\");\n            yy.getLogger().debug(\"Lex (down):\", yy_.yytext);\n            return \"DIR\";\n          case 92:\n            yy_.yytext = \"]>\";\n            yy.getLogger().debug(\"Lex (ARROW_DIR end):\", yy_.yytext);\n            this.popState();\n            this.popState();\n            return \"BLOCK_ARROW_END\";\n          case 93:\n            yy.getLogger().debug(\"Lex: LINK\", \"#\" + yy_.yytext + \"#\");\n            return 15;\n          case 94:\n            yy.getLogger().debug(\"Lex: LINK\", yy_.yytext);\n            return 15;\n          case 95:\n            yy.getLogger().debug(\"Lex: LINK\", yy_.yytext);\n            return 15;\n          case 96:\n            yy.getLogger().debug(\"Lex: LINK\", yy_.yytext);\n            return 15;\n          case 97:\n            yy.getLogger().debug(\"Lex: START_LINK\", yy_.yytext);\n            this.pushState(\"LLABEL\");\n            return 16;\n          case 98:\n            yy.getLogger().debug(\"Lex: START_LINK\", yy_.yytext);\n            this.pushState(\"LLABEL\");\n            return 16;\n          case 99:\n            yy.getLogger().debug(\"Lex: START_LINK\", yy_.yytext);\n            this.pushState(\"LLABEL\");\n            return 16;\n          case 100:\n            this.pushState(\"md_string\");\n            break;\n          case 101:\n            yy.getLogger().debug(\"Lex: Starting string\");\n            this.pushState(\"string\");\n            return \"LINK_LABEL\";\n          case 102:\n            this.popState();\n            yy.getLogger().debug(\"Lex: LINK\", \"#\" + yy_.yytext + \"#\");\n            return 15;\n          case 103:\n            this.popState();\n            yy.getLogger().debug(\"Lex: LINK\", yy_.yytext);\n            return 15;\n          case 104:\n            this.popState();\n            yy.getLogger().debug(\"Lex: LINK\", yy_.yytext);\n            return 15;\n          case 105:\n            yy.getLogger().debug(\"Lex: COLON\", yy_.yytext);\n            yy_.yytext = yy_.yytext.slice(1);\n            return 27;\n        }\n      },\n      rules: [/^(?:block-beta\\b)/, /^(?:block\\s+)/, /^(?:block\\n+)/, /^(?:block:)/, /^(?:[\\s]+)/, /^(?:[\\n]+)/, /^(?:((\\u000D\\u000A)|(\\u000A)))/, /^(?:columns\\s+auto\\b)/, /^(?:columns\\s+[\\d]+)/, /^(?:[\"][`])/, /^(?:[^`\"]+)/, /^(?:[`][\"])/, /^(?:[\"])/, /^(?:[\"])/, /^(?:[^\"]*)/, /^(?:space[:]\\d+)/, /^(?:space\\b)/, /^(?:default\\b)/, /^(?:linkStyle\\b)/, /^(?:interpolate\\b)/, /^(?:classDef\\s+)/, /^(?:DEFAULT\\s+)/, /^(?:\\w+\\s+)/, /^(?:[^\\n]*)/, /^(?:class\\s+)/, /^(?:(\\w+)+((,\\s*\\w+)*))/, /^(?:[^\\n]*)/, /^(?:style\\s+)/, /^(?:(\\w+)+((,\\s*\\w+)*))/, /^(?:[^\\n]*)/, /^(?:accTitle\\s*:\\s*)/, /^(?:(?!\\n||)*[^\\n]*)/, /^(?:accDescr\\s*:\\s*)/, /^(?:(?!\\n||)*[^\\n]*)/, /^(?:accDescr\\s*\\{\\s*)/, /^(?:[\\}])/, /^(?:[^\\}]*)/, /^(?:end\\b\\s*)/, /^(?:\\(\\(\\()/, /^(?:\\)\\)\\))/, /^(?:[\\)]\\))/, /^(?:\\}\\})/, /^(?:\\})/, /^(?:\\(-)/, /^(?:-\\))/, /^(?:\\(\\()/, /^(?:\\]\\])/, /^(?:\\()/, /^(?:\\]\\))/, /^(?:\\\\\\])/, /^(?:\\/\\])/, /^(?:\\)\\])/, /^(?:[\\)])/, /^(?:\\]>)/, /^(?:[\\]])/, /^(?:-\\))/, /^(?:\\(-)/, /^(?:\\)\\))/, /^(?:\\))/, /^(?:\\(\\(\\()/, /^(?:\\(\\()/, /^(?:\\{\\{)/, /^(?:\\{)/, /^(?:>)/, /^(?:\\(\\[)/, /^(?:\\()/, /^(?:\\[\\[)/, /^(?:\\[\\|)/, /^(?:\\[\\()/, /^(?:\\)\\)\\))/, /^(?:\\[\\\\)/, /^(?:\\[\\/)/, /^(?:\\[\\\\)/, /^(?:\\[)/, /^(?:<\\[)/, /^(?:[^\\(\\[\\n\\-\\)\\{\\}\\s\\<\\>:]+)/, /^(?:$)/, /^(?:[\"][`])/, /^(?:[\"][`])/, /^(?:[^`\"]+)/, /^(?:[`][\"])/, /^(?:[\"])/, /^(?:[\"])/, /^(?:[^\"]+)/, /^(?:[\"])/, /^(?:\\]>\\s*\\()/, /^(?:,?\\s*right\\s*)/, /^(?:,?\\s*left\\s*)/, /^(?:,?\\s*x\\s*)/, /^(?:,?\\s*y\\s*)/, /^(?:,?\\s*up\\s*)/, /^(?:,?\\s*down\\s*)/, /^(?:\\)\\s*)/, /^(?:\\s*[xo<]?--+[-xo>]\\s*)/, /^(?:\\s*[xo<]?==+[=xo>]\\s*)/, /^(?:\\s*[xo<]?-?\\.+-[xo>]?\\s*)/, /^(?:\\s*~~[\\~]+\\s*)/, /^(?:\\s*[xo<]?--\\s*)/, /^(?:\\s*[xo<]?==\\s*)/, /^(?:\\s*[xo<]?-\\.\\s*)/, /^(?:[\"][`])/, /^(?:[\"])/, /^(?:\\s*[xo<]?--+[-xo>]\\s*)/, /^(?:\\s*[xo<]?==+[=xo>]\\s*)/, /^(?:\\s*[xo<]?-?\\.+-[xo>]?\\s*)/, /^(?::\\d+)/],\n      conditions: {\n        \"STYLE_DEFINITION\": {\n          \"rules\": [29],\n          \"inclusive\": false\n        },\n        \"STYLE_STMNT\": {\n          \"rules\": [28],\n          \"inclusive\": false\n        },\n        \"CLASSDEFID\": {\n          \"rules\": [23],\n          \"inclusive\": false\n        },\n        \"CLASSDEF\": {\n          \"rules\": [21, 22],\n          \"inclusive\": false\n        },\n        \"CLASS_STYLE\": {\n          \"rules\": [26],\n          \"inclusive\": false\n        },\n        \"CLASS\": {\n          \"rules\": [25],\n          \"inclusive\": false\n        },\n        \"LLABEL\": {\n          \"rules\": [100, 101, 102, 103, 104],\n          \"inclusive\": false\n        },\n        \"ARROW_DIR\": {\n          \"rules\": [86, 87, 88, 89, 90, 91, 92],\n          \"inclusive\": false\n        },\n        \"BLOCK_ARROW\": {\n          \"rules\": [77, 82, 85],\n          \"inclusive\": false\n        },\n        \"NODE\": {\n          \"rules\": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 78, 81],\n          \"inclusive\": false\n        },\n        \"md_string\": {\n          \"rules\": [10, 11, 79, 80],\n          \"inclusive\": false\n        },\n        \"space\": {\n          \"rules\": [],\n          \"inclusive\": false\n        },\n        \"string\": {\n          \"rules\": [13, 14, 83, 84],\n          \"inclusive\": false\n        },\n        \"acc_descr_multiline\": {\n          \"rules\": [35, 36],\n          \"inclusive\": false\n        },\n        \"acc_descr\": {\n          \"rules\": [33],\n          \"inclusive\": false\n        },\n        \"acc_title\": {\n          \"rules\": [31],\n          \"inclusive\": false\n        },\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17, 18, 19, 20, 24, 27, 30, 32, 34, 37, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93, 94, 95, 96, 97, 98, 99, 105],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nlet blockDatabase = {};\nlet edgeList = [];\nlet edgeCount = {};\nconst COLOR_KEYWORD = \"color\";\nconst FILL_KEYWORD = \"fill\";\nconst BG_FILL = \"bgFill\";\nconst STYLECLASS_SEP = \",\";\nconst config = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.c)();\nlet classes = {};\nconst sanitizeText = txt => _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.e.sanitizeText(txt, config);\nconst addStyleClass = function (id, styleAttributes = \"\") {\n  if (classes[id] === void 0) {\n    classes[id] = {\n      id,\n      styles: [],\n      textStyles: []\n    };\n  }\n  const foundClass = classes[id];\n  if (styleAttributes !== void 0 && styleAttributes !== null) {\n    styleAttributes.split(STYLECLASS_SEP).forEach(attrib => {\n      const fixedAttrib = attrib.replace(/([^;]*);/, \"$1\").trim();\n      if (attrib.match(COLOR_KEYWORD)) {\n        const newStyle1 = fixedAttrib.replace(FILL_KEYWORD, BG_FILL);\n        const newStyle2 = newStyle1.replace(COLOR_KEYWORD, FILL_KEYWORD);\n        foundClass.textStyles.push(newStyle2);\n      }\n      foundClass.styles.push(fixedAttrib);\n    });\n  }\n};\nconst addStyle2Node = function (id, styles = \"\") {\n  const foundBlock = blockDatabase[id];\n  if (styles !== void 0 && styles !== null) {\n    foundBlock.styles = styles.split(STYLECLASS_SEP);\n  }\n};\nconst setCssClass = function (itemIds, cssClassName) {\n  itemIds.split(\",\").forEach(function (id) {\n    let foundBlock = blockDatabase[id];\n    if (foundBlock === void 0) {\n      const trimmedId = id.trim();\n      blockDatabase[trimmedId] = {\n        id: trimmedId,\n        type: \"na\",\n        children: []\n      };\n      foundBlock = blockDatabase[trimmedId];\n    }\n    if (!foundBlock.classes) {\n      foundBlock.classes = [];\n    }\n    foundBlock.classes.push(cssClassName);\n  });\n};\nconst populateBlockDatabase = (_blockList, parent) => {\n  const blockList = _blockList.flat();\n  const children = [];\n  for (const block of blockList) {\n    if (block.label) {\n      block.label = sanitizeText(block.label);\n    }\n    if (block.type === \"classDef\") {\n      addStyleClass(block.id, block.css);\n      continue;\n    }\n    if (block.type === \"applyClass\") {\n      setCssClass(block.id, (block == null ? void 0 : block.styleClass) || \"\");\n      continue;\n    }\n    if (block.type === \"applyStyles\") {\n      if (block == null ? void 0 : block.stylesStr) {\n        addStyle2Node(block.id, block == null ? void 0 : block.stylesStr);\n      }\n      continue;\n    }\n    if (block.type === \"column-setting\") {\n      parent.columns = block.columns || -1;\n    } else if (block.type === \"edge\") {\n      if (edgeCount[block.id]) {\n        edgeCount[block.id]++;\n      } else {\n        edgeCount[block.id] = 1;\n      }\n      block.id = edgeCount[block.id] + \"-\" + block.id;\n      edgeList.push(block);\n    } else {\n      if (!block.label) {\n        if (block.type === \"composite\") {\n          block.label = \"\";\n        } else {\n          block.label = block.id;\n        }\n      }\n      const newBlock = !blockDatabase[block.id];\n      if (newBlock) {\n        blockDatabase[block.id] = block;\n      } else {\n        if (block.type !== \"na\") {\n          blockDatabase[block.id].type = block.type;\n        }\n        if (block.label !== block.id) {\n          blockDatabase[block.id].label = block.label;\n        }\n      }\n      if (block.children) {\n        populateBlockDatabase(block.children, block);\n      }\n      if (block.type === \"space\") {\n        const w = block.width || 1;\n        for (let j = 0; j < w; j++) {\n          const newBlock2 = (0,lodash_es_clone_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(block);\n          newBlock2.id = newBlock2.id + \"-\" + j;\n          blockDatabase[newBlock2.id] = newBlock2;\n          children.push(newBlock2);\n        }\n      } else if (newBlock) {\n        children.push(block);\n      }\n    }\n  }\n  parent.children = children;\n};\nlet blocks = [];\nlet rootBlock = {\n  id: \"root\",\n  type: \"composite\",\n  children: [],\n  columns: -1\n};\nconst clear = () => {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Clear called\");\n  (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.v)();\n  rootBlock = {\n    id: \"root\",\n    type: \"composite\",\n    children: [],\n    columns: -1\n  };\n  blockDatabase = {\n    root: rootBlock\n  };\n  blocks = [];\n  classes = {};\n  edgeList = [];\n  edgeCount = {};\n};\nfunction typeStr2Type(typeStr) {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"typeStr2Type\", typeStr);\n  switch (typeStr) {\n    case \"[]\":\n      return \"square\";\n    case \"()\":\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"we have a round\");\n      return \"round\";\n    case \"(())\":\n      return \"circle\";\n    case \">]\":\n      return \"rect_left_inv_arrow\";\n    case \"{}\":\n      return \"diamond\";\n    case \"{{}}\":\n      return \"hexagon\";\n    case \"([])\":\n      return \"stadium\";\n    case \"[[]]\":\n      return \"subroutine\";\n    case \"[()]\":\n      return \"cylinder\";\n    case \"((()))\":\n      return \"doublecircle\";\n    case \"[//]\":\n      return \"lean_right\";\n    case \"[\\\\\\\\]\":\n      return \"lean_left\";\n    case \"[/\\\\]\":\n      return \"trapezoid\";\n    case \"[\\\\/]\":\n      return \"inv_trapezoid\";\n    case \"<[]>\":\n      return \"block_arrow\";\n    default:\n      return \"na\";\n  }\n}\nfunction edgeTypeStr2Type(typeStr) {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"typeStr2Type\", typeStr);\n  switch (typeStr) {\n    case \"==\":\n      return \"thick\";\n    default:\n      return \"normal\";\n  }\n}\nfunction edgeStrToEdgeData(typeStr) {\n  switch (typeStr.trim()) {\n    case \"--x\":\n      return \"arrow_cross\";\n    case \"--o\":\n      return \"arrow_circle\";\n    default:\n      return \"arrow_point\";\n  }\n}\nlet cnt = 0;\nconst generateId = () => {\n  cnt++;\n  return \"id-\" + Math.random().toString(36).substr(2, 12) + \"-\" + cnt;\n};\nconst setHierarchy = block => {\n  rootBlock.children = block;\n  populateBlockDatabase(block, rootBlock);\n  blocks = rootBlock.children;\n};\nconst getColumns = blockId => {\n  const block = blockDatabase[blockId];\n  if (!block) {\n    return -1;\n  }\n  if (block.columns) {\n    return block.columns;\n  }\n  if (!block.children) {\n    return -1;\n  }\n  return block.children.length;\n};\nconst getBlocksFlat = () => {\n  return [...Object.values(blockDatabase)];\n};\nconst getBlocks = () => {\n  return blocks || [];\n};\nconst getEdges = () => {\n  return edgeList;\n};\nconst getBlock = id => {\n  return blockDatabase[id];\n};\nconst setBlock = block => {\n  blockDatabase[block.id] = block;\n};\nconst getLogger = () => console;\nconst getClasses$1 = function () {\n  return classes;\n};\nconst db = {\n  getConfig: () => (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.F)().block,\n  typeStr2Type,\n  edgeTypeStr2Type,\n  edgeStrToEdgeData,\n  getLogger,\n  getBlocksFlat,\n  getBlocks,\n  getEdges,\n  setHierarchy,\n  getBlock,\n  setBlock,\n  getColumns,\n  getClasses: getClasses$1,\n  clear,\n  generateId\n};\nconst db$1 = db;\nconst fade = (color, opacity) => {\n  const channel = khroma__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma__WEBPACK_IMPORTED_MODULE_9__[\"default\"](r, g, b, opacity);\n};\nconst getStyles = options => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color:\n  }\n\n  .node .cluster {\n    // fill: ${fade(options.mainBkg, 0.5)};\n    fill: ${fade(options.clusterBkg, 0.5)};\n    stroke: ${fade(options.clusterBorder, 0.2)};\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nfunction getNodeFromBlock(block, db2, positioned = false) {\n  var _a2, _b2, _c;\n  const vertex = block;\n  let classStr = \"default\";\n  if ((((_a2 = vertex == null ? void 0 : vertex.classes) == null ? void 0 : _a2.length) || 0) > 0) {\n    classStr = ((vertex == null ? void 0 : vertex.classes) || []).join(\" \");\n  }\n  classStr = classStr + \" flowchart-label\";\n  let radius = 0;\n  let shape = \"\";\n  let padding2;\n  switch (vertex.type) {\n    case \"round\":\n      radius = 5;\n      shape = \"rect\";\n      break;\n    case \"composite\":\n      radius = 0;\n      shape = \"composite\";\n      padding2 = 0;\n      break;\n    case \"square\":\n      shape = \"rect\";\n      break;\n    case \"diamond\":\n      shape = \"question\";\n      break;\n    case \"hexagon\":\n      shape = \"hexagon\";\n      break;\n    case \"block_arrow\":\n      shape = \"block_arrow\";\n      break;\n    case \"odd\":\n      shape = \"rect_left_inv_arrow\";\n      break;\n    case \"lean_right\":\n      shape = \"lean_right\";\n      break;\n    case \"lean_left\":\n      shape = \"lean_left\";\n      break;\n    case \"trapezoid\":\n      shape = \"trapezoid\";\n      break;\n    case \"inv_trapezoid\":\n      shape = \"inv_trapezoid\";\n      break;\n    case \"rect_left_inv_arrow\":\n      shape = \"rect_left_inv_arrow\";\n      break;\n    case \"circle\":\n      shape = \"circle\";\n      break;\n    case \"ellipse\":\n      shape = \"ellipse\";\n      break;\n    case \"stadium\":\n      shape = \"stadium\";\n      break;\n    case \"subroutine\":\n      shape = \"subroutine\";\n      break;\n    case \"cylinder\":\n      shape = \"cylinder\";\n      break;\n    case \"group\":\n      shape = \"rect\";\n      break;\n    case \"doublecircle\":\n      shape = \"doublecircle\";\n      break;\n    default:\n      shape = \"rect\";\n  }\n  const styles = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.k)((vertex == null ? void 0 : vertex.styles) || []);\n  const vertexText = vertex.label;\n  const bounds = vertex.size || {\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n  const node = {\n    labelStyle: styles.labelStyle,\n    shape,\n    labelText: vertexText,\n    rx: radius,\n    ry: radius,\n    class: classStr,\n    style: styles.style,\n    id: vertex.id,\n    directions: vertex.directions,\n    width: bounds.width,\n    height: bounds.height,\n    x: bounds.x,\n    y: bounds.y,\n    positioned,\n    intersect: void 0,\n    type: vertex.type,\n    padding: padding2 ?? (((_c = (_b2 = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.F)()) == null ? void 0 : _b2.block) == null ? void 0 : _c.padding) || 0)\n  };\n  return node;\n}\nasync function calculateBlockSize(elem, block, db2) {\n  const node = getNodeFromBlock(block, db2, false);\n  if (node.type === \"group\") {\n    return;\n  }\n  const nodeEl = await (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.e)(elem, node);\n  const boundingBox = nodeEl.node().getBBox();\n  const obj = db2.getBlock(node.id);\n  obj.size = {\n    width: boundingBox.width,\n    height: boundingBox.height,\n    x: 0,\n    y: 0,\n    node: nodeEl\n  };\n  db2.setBlock(obj);\n  nodeEl.remove();\n}\nasync function insertBlockPositioned(elem, block, db2) {\n  const node = getNodeFromBlock(block, db2, true);\n  const obj = db2.getBlock(node.id);\n  if (obj.type !== \"space\") {\n    await (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.e)(elem, node);\n    block.intersect = node == null ? void 0 : node.intersect;\n    (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.p)(node);\n  }\n}\nasync function performOperations(elem, blocks2, db2, operation) {\n  for (const block of blocks2) {\n    await operation(elem, block, db2);\n    if (block.children) {\n      await performOperations(elem, block.children, db2, operation);\n    }\n  }\n}\nasync function calculateBlockSizes(elem, blocks2, db2) {\n  await performOperations(elem, blocks2, db2, calculateBlockSize);\n}\nasync function insertBlocks(elem, blocks2, db2) {\n  await performOperations(elem, blocks2, db2, insertBlockPositioned);\n}\nasync function insertEdges(elem, edges, blocks2, db2, id) {\n  const g = new dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_0__.Graph({\n    multigraph: true,\n    compound: true\n  });\n  g.setGraph({\n    rankdir: \"TB\",\n    nodesep: 10,\n    ranksep: 10,\n    marginx: 8,\n    marginy: 8\n  });\n  for (const block of blocks2) {\n    if (block.size) {\n      g.setNode(block.id, {\n        width: block.size.width,\n        height: block.size.height,\n        intersect: block.intersect\n      });\n    }\n  }\n  for (const edge of edges) {\n    if (edge.start && edge.end) {\n      const startBlock = db2.getBlock(edge.start);\n      const endBlock = db2.getBlock(edge.end);\n      if ((startBlock == null ? void 0 : startBlock.size) && (endBlock == null ? void 0 : endBlock.size)) {\n        const start = startBlock.size;\n        const end = endBlock.size;\n        const points = [{\n          x: start.x,\n          y: start.y\n        }, {\n          x: start.x + (end.x - start.x) / 2,\n          y: start.y + (end.y - start.y) / 2\n        }, {\n          x: end.x,\n          y: end.y\n        }];\n        await (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.h)(elem, {\n          v: edge.start,\n          w: edge.end,\n          name: edge.id\n        }, {\n          ...edge,\n          arrowTypeEnd: edge.arrowTypeEnd,\n          arrowTypeStart: edge.arrowTypeStart,\n          points,\n          classes: \"edge-thickness-normal edge-pattern-solid flowchart-link LS-a1 LE-b1\"\n        }, void 0, \"block\", g, id);\n        if (edge.label) {\n          await (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.f)(elem, {\n            ...edge,\n            label: edge.label,\n            labelStyle: \"stroke: #333; stroke-width: 1.5px;fill:none;\",\n            arrowTypeEnd: edge.arrowTypeEnd,\n            arrowTypeStart: edge.arrowTypeStart,\n            points,\n            classes: \"edge-thickness-normal edge-pattern-solid flowchart-link LS-a1 LE-b1\"\n          });\n          await (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.j)({\n            ...edge,\n            x: points[1].x,\n            y: points[1].y\n          }, {\n            originalPath: points\n          });\n        }\n      }\n    }\n  }\n}\nconst padding = ((_b = (_a = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.c)()) == null ? void 0 : _a.block) == null ? void 0 : _b.padding) || 8;\nfunction calculateBlockPosition(columns, position) {\n  if (columns === 0 || !Number.isInteger(columns)) {\n    throw new Error(\"Columns must be an integer !== 0.\");\n  }\n  if (position < 0 || !Number.isInteger(position)) {\n    throw new Error(\"Position must be a non-negative integer.\" + position);\n  }\n  if (columns < 0) {\n    return {\n      px: position,\n      py: 0\n    };\n  }\n  if (columns === 1) {\n    return {\n      px: 0,\n      py: position\n    };\n  }\n  const px = position % columns;\n  const py = Math.floor(position / columns);\n  return {\n    px,\n    py\n  };\n}\nconst getMaxChildSize = block => {\n  let maxWidth = 0;\n  let maxHeight = 0;\n  for (const child of block.children) {\n    const {\n      width,\n      height,\n      x,\n      y\n    } = child.size || {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    };\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"getMaxChildSize abc95 child:\", child.id, \"width:\", width, \"height:\", height, \"x:\", x, \"y:\", y, child.type);\n    if (child.type === \"space\") {\n      continue;\n    }\n    if (width > maxWidth) {\n      maxWidth = width / (block.widthInColumns || 1);\n    }\n    if (height > maxHeight) {\n      maxHeight = height;\n    }\n  }\n  return {\n    width: maxWidth,\n    height: maxHeight\n  };\n};\nfunction setBlockSizes(block, db2, siblingWidth = 0, siblingHeight = 0) {\n  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"setBlockSizes abc95 (start)\", block.id, (_a2 = block == null ? void 0 : block.size) == null ? void 0 : _a2.x, \"block width =\", block == null ? void 0 : block.size, \"sieblingWidth\", siblingWidth);\n  if (!((_b2 = block == null ? void 0 : block.size) == null ? void 0 : _b2.width)) {\n    block.size = {\n      width: siblingWidth,\n      height: siblingHeight,\n      x: 0,\n      y: 0\n    };\n  }\n  let maxWidth = 0;\n  let maxHeight = 0;\n  if (((_c = block.children) == null ? void 0 : _c.length) > 0) {\n    for (const child of block.children) {\n      setBlockSizes(child, db2);\n    }\n    const childSize = getMaxChildSize(block);\n    maxWidth = childSize.width;\n    maxHeight = childSize.height;\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"setBlockSizes abc95 maxWidth of\", block.id, \":s children is \", maxWidth, maxHeight);\n    for (const child of block.children) {\n      if (child.size) {\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc95 Setting size of children of ${block.id} id=${child.id} ${maxWidth} ${maxHeight} ${child.size}`);\n        child.size.width = maxWidth * (child.widthInColumns || 1) + padding * ((child.widthInColumns || 1) - 1);\n        child.size.height = maxHeight;\n        child.size.x = 0;\n        child.size.y = 0;\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc95 updating size of ${block.id} children child:${child.id} maxWidth:${maxWidth} maxHeight:${maxHeight}`);\n      }\n    }\n    for (const child of block.children) {\n      setBlockSizes(child, db2, maxWidth, maxHeight);\n    }\n    const columns = block.columns || -1;\n    let numItems = 0;\n    for (const child of block.children) {\n      numItems += child.widthInColumns || 1;\n    }\n    let xSize = block.children.length;\n    if (columns > 0 && columns < numItems) {\n      xSize = columns;\n    }\n    block.widthInColumns || 1;\n    const ySize = Math.ceil(numItems / xSize);\n    let width = xSize * (maxWidth + padding) + padding;\n    let height = ySize * (maxHeight + padding) + padding;\n    if (width < siblingWidth) {\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`Detected to small siebling: abc95 ${block.id} sieblingWidth ${siblingWidth} sieblingHeight ${siblingHeight} width ${width}`);\n      width = siblingWidth;\n      height = siblingHeight;\n      const childWidth = (siblingWidth - xSize * padding - padding) / xSize;\n      const childHeight = (siblingHeight - ySize * padding - padding) / ySize;\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Size indata abc88\", block.id, \"childWidth\", childWidth, \"maxWidth\", maxWidth);\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Size indata abc88\", block.id, \"childHeight\", childHeight, \"maxHeight\", maxHeight);\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Size indata abc88 xSize\", xSize, \"padding\", padding);\n      for (const child of block.children) {\n        if (child.size) {\n          child.size.width = childWidth;\n          child.size.height = childHeight;\n          child.size.x = 0;\n          child.size.y = 0;\n        }\n      }\n    }\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc95 (finale calc) ${block.id} xSize ${xSize} ySize ${ySize} columns ${columns}${block.children.length} width=${Math.max(width, ((_d = block.size) == null ? void 0 : _d.width) || 0)}`);\n    if (width < (((_e = block == null ? void 0 : block.size) == null ? void 0 : _e.width) || 0)) {\n      width = ((_f = block == null ? void 0 : block.size) == null ? void 0 : _f.width) || 0;\n      const num = columns > 0 ? Math.min(block.children.length, columns) : block.children.length;\n      if (num > 0) {\n        const childWidth = (width - num * padding - padding) / num;\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"abc95 (growing to fit) width\", block.id, width, (_g = block.size) == null ? void 0 : _g.width, childWidth);\n        for (const child of block.children) {\n          if (child.size) {\n            child.size.width = childWidth;\n          }\n        }\n      }\n    }\n    block.size = {\n      width,\n      height,\n      x: 0,\n      y: 0\n    };\n  }\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"setBlockSizes abc94 (done)\", block.id, (_h = block == null ? void 0 : block.size) == null ? void 0 : _h.x, (_i = block == null ? void 0 : block.size) == null ? void 0 : _i.width, (_j = block == null ? void 0 : block.size) == null ? void 0 : _j.y, (_k = block == null ? void 0 : block.size) == null ? void 0 : _k.height);\n}\nfunction layoutBlocks(block, db2) {\n  var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc85 layout blocks (=>layoutBlocks) ${block.id} x: ${(_a2 = block == null ? void 0 : block.size) == null ? void 0 : _a2.x} y: ${(_b2 = block == null ? void 0 : block.size) == null ? void 0 : _b2.y} width: ${(_c = block == null ? void 0 : block.size) == null ? void 0 : _c.width}`);\n  const columns = block.columns || -1;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"layoutBlocks columns abc95\", block.id, \"=>\", columns, block);\n  if (block.children &&\n  // find max width of children\n  block.children.length > 0) {\n    const width = ((_e = (_d = block == null ? void 0 : block.children[0]) == null ? void 0 : _d.size) == null ? void 0 : _e.width) || 0;\n    const widthOfChildren = block.children.length * width + (block.children.length - 1) * padding;\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"widthOfChildren 88\", widthOfChildren, \"posX\");\n    let columnPos = 0;\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"abc91 block?.size?.x\", block.id, (_f = block == null ? void 0 : block.size) == null ? void 0 : _f.x);\n    let startingPosX = ((_g = block == null ? void 0 : block.size) == null ? void 0 : _g.x) ? ((_h = block == null ? void 0 : block.size) == null ? void 0 : _h.x) + (-((_i = block == null ? void 0 : block.size) == null ? void 0 : _i.width) / 2 || 0) : -padding;\n    let rowPos = 0;\n    for (const child of block.children) {\n      const parent = block;\n      if (!child.size) {\n        continue;\n      }\n      const {\n        width: width2,\n        height\n      } = child.size;\n      const {\n        px,\n        py\n      } = calculateBlockPosition(columns, columnPos);\n      if (py != rowPos) {\n        rowPos = py;\n        startingPosX = ((_j = block == null ? void 0 : block.size) == null ? void 0 : _j.x) ? ((_k = block == null ? void 0 : block.size) == null ? void 0 : _k.x) + (-((_l = block == null ? void 0 : block.size) == null ? void 0 : _l.width) / 2 || 0) : -padding;\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"New row in layout for block\", block.id, \" and child \", child.id, rowPos);\n      }\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc89 layout blocks (child) id: ${child.id} Pos: ${columnPos} (px, py) ${px},${py} (${(_m = parent == null ? void 0 : parent.size) == null ? void 0 : _m.x},${(_n = parent == null ? void 0 : parent.size) == null ? void 0 : _n.y}) parent: ${parent.id} width: ${width2}${padding}`);\n      if (parent.size) {\n        const halfWidth = width2 / 2;\n        child.size.x = startingPosX + padding + halfWidth;\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc91 layout blocks (calc) px, pyid:${child.id} startingPos=X${startingPosX} new startingPosX${child.size.x} ${halfWidth} padding=${padding} width=${width2} halfWidth=${halfWidth} => x:${child.size.x} y:${child.size.y} ${child.widthInColumns} (width * (child?.w || 1)) / 2 ${width2 * ((child == null ? void 0 : child.widthInColumns) || 1) / 2}`);\n        startingPosX = child.size.x + halfWidth;\n        child.size.y = parent.size.y - parent.size.height / 2 + py * (height + padding) + height / 2 + padding;\n        _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`abc88 layout blocks (calc) px, pyid:${child.id}startingPosX${startingPosX}${padding}${halfWidth}=>x:${child.size.x}y:${child.size.y}${child.widthInColumns}(width * (child?.w || 1)) / 2${width2 * ((child == null ? void 0 : child.widthInColumns) || 1) / 2}`);\n      }\n      if (child.children) {\n        layoutBlocks(child);\n      }\n      columnPos += (child == null ? void 0 : child.widthInColumns) || 1;\n      _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"abc88 columnsPos\", child, columnPos);\n    }\n  }\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(`layout blocks (<==layoutBlocks) ${block.id} x: ${(_o = block == null ? void 0 : block.size) == null ? void 0 : _o.x} y: ${(_p = block == null ? void 0 : block.size) == null ? void 0 : _p.y} width: ${(_q = block == null ? void 0 : block.size) == null ? void 0 : _q.width}`);\n}\nfunction findBounds(block, {\n  minX,\n  minY,\n  maxX,\n  maxY\n} = {\n  minX: 0,\n  minY: 0,\n  maxX: 0,\n  maxY: 0\n}) {\n  if (block.size && block.id !== \"root\") {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = block.size;\n    if (x - width / 2 < minX) {\n      minX = x - width / 2;\n    }\n    if (y - height / 2 < minY) {\n      minY = y - height / 2;\n    }\n    if (x + width / 2 > maxX) {\n      maxX = x + width / 2;\n    }\n    if (y + height / 2 > maxY) {\n      maxY = y + height / 2;\n    }\n  }\n  if (block.children) {\n    for (const child of block.children) {\n      ({\n        minX,\n        minY,\n        maxX,\n        maxY\n      } = findBounds(child, {\n        minX,\n        minY,\n        maxX,\n        maxY\n      }));\n    }\n  }\n  return {\n    minX,\n    minY,\n    maxX,\n    maxY\n  };\n}\nfunction layout(db2) {\n  const root = db2.getBlock(\"root\");\n  if (!root) {\n    return;\n  }\n  setBlockSizes(root, db2, 0, 0);\n  layoutBlocks(root);\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"getBlocks\", JSON.stringify(root, null, 2));\n  const {\n    minX,\n    minY,\n    maxX,\n    maxY\n  } = findBounds(root);\n  const height = maxY - minY;\n  const width = maxX - minX;\n  return {\n    x: minX,\n    y: minY,\n    width,\n    height\n  };\n}\nconst getClasses = function (text, diagObj) {\n  return diagObj.db.getClasses();\n};\nconst draw = async function (text, id, _version, diagObj) {\n  const {\n    securityLevel,\n    block: conf\n  } = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.F)();\n  const db2 = diagObj.db;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(sandboxElement.nodes()[0].contentDocument.body) : (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(\"body\");\n  const svg = securityLevel === \"sandbox\" ? root.select(`[id=\"${id}\"]`) : (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(`[id=\"${id}\"]`);\n  const markers = [\"point\", \"circle\", \"cross\"];\n  (0,_edges_066a5561_js__WEBPACK_IMPORTED_MODULE_10__.a)(svg, markers, diagObj.type, id);\n  const bl = db2.getBlocks();\n  const blArr = db2.getBlocksFlat();\n  const edges = db2.getEdges();\n  const nodes = svg.insert(\"g\").attr(\"class\", \"block\");\n  await calculateBlockSizes(nodes, bl, db2);\n  const bounds = layout(db2);\n  await insertBlocks(nodes, bl, db2);\n  await insertEdges(nodes, edges, blArr, db2, id);\n  if (bounds) {\n    const bounds2 = bounds;\n    const magicFactor = Math.max(1, Math.round(0.125 * (bounds2.width / bounds2.height)));\n    const height = bounds2.height + magicFactor + 10;\n    const width = bounds2.width + 10;\n    const {\n      useMaxWidth\n    } = conf;\n    (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.i)(svg, height, width, !!useMaxWidth);\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_6__.l.debug(\"Here Bounds\", bounds, bounds2);\n    svg.attr(\"viewBox\", `${bounds2.x - 5} ${bounds2.y - 5} ${bounds2.width + 10} ${bounds2.height + 10}`);\n  }\n  (0,d3__WEBPACK_IMPORTED_MODULE_1__.scaleOrdinal)(d3__WEBPACK_IMPORTED_MODULE_1__.schemeTableau10);\n};\nconst renderer = {\n  draw,\n  getClasses\n};\nconst diagram = {\n  parser: parser$1,\n  db: db$1,\n  renderer,\n  styles: flowStyles\n};\n\n\n//# sourceURL=webpack://crates-io/../../.pnpm/mermaid@10.9.1/node_modules/mermaid/dist/blockDiagram-9f4a6865.js?");

/***/ })

}]);