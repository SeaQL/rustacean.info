{"version":3,"sources":["license.js","loader.js","@ember/debug/index.js","@ember/debug/lib/capture-render-tree.js","@ember/debug/lib/deprecate.js","@ember/debug/lib/handlers.js","@ember/debug/lib/inspect.js","@ember/debug/lib/testing.js","@ember/debug/lib/warn.js","ember-testing/index.js","ember-testing/lib/adapters/adapter.js","ember-testing/lib/adapters/qunit.js","ember-testing/lib/ext/application.js","ember-testing/lib/ext/rsvp.js","ember-testing/lib/helpers.js","ember-testing/lib/helpers/and_then.js","ember-testing/lib/helpers/current_path.js","ember-testing/lib/helpers/current_route_name.js","ember-testing/lib/helpers/current_url.js","ember-testing/lib/helpers/pause_test.js","ember-testing/lib/helpers/visit.js","ember-testing/lib/helpers/wait.js","ember-testing/lib/initializers.js","ember-testing/lib/public-api.js","ember-testing/lib/setup_for_testing.js","ember-testing/lib/test.js","ember-testing/lib/test/adapter.js","ember-testing/lib/test/helpers.js","ember-testing/lib/test/on_inject_helpers.js","ember-testing/lib/test/pending_requests.js","ember-testing/lib/test/promise.js","ember-testing/lib/test/run.js","ember-testing/lib/test/waiters.js","../rewritten-packages/@embroider/synthesized-vendor/vendor/embroider-macros-test-support.js","../rewritten-packages/@embroider/synthesized-vendor/node_modules/@percy/sdk-utils/dist/bundle.js","../rewritten-packages/@embroider/synthesized-vendor/vendor/qunit-console-grouper.js"],"sourcesContent":["/*!\n * @overview  Ember - JavaScript Application Framework\n * @copyright Copyright 2011 Tilde Inc. and contributors\n *            Portions Copyright 2006-2011 Strobe Inc.\n *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.\n * @license   Licensed under MIT license\n *            See https://raw.github.com/emberjs/ember.js/master/LICENSE\n * @version   5.9.0\n */","/* eslint-disable no-var */\n/* globals global globalThis self */\n/* eslint-disable-next-line no-unused-vars */\nvar define, require;\n(function () {\n  var globalObj = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;\n  if (globalObj === null) {\n    throw new Error('unable to locate global object');\n  }\n  if (typeof globalObj.define === 'function' && typeof globalObj.require === 'function') {\n    define = globalObj.define;\n    require = globalObj.require;\n    return;\n  }\n  var registry = Object.create(null);\n  var seen = Object.create(null);\n  function missingModule(name, referrerName) {\n    if (referrerName) {\n      throw new Error('Could not find module ' + name + ' required by: ' + referrerName);\n    } else {\n      throw new Error('Could not find module ' + name);\n    }\n  }\n  function internalRequire(_name, referrerName) {\n    var name = _name;\n    var mod = registry[name];\n    if (!mod) {\n      name = name + '/index';\n      mod = registry[name];\n    }\n    var exports = seen[name];\n    if (exports !== undefined) {\n      return exports;\n    }\n    exports = seen[name] = {};\n    if (!mod) {\n      missingModule(_name, referrerName);\n    }\n    var deps = mod.deps;\n    var callback = mod.callback;\n    var reified = new Array(deps.length);\n    for (var i = 0; i < deps.length; i++) {\n      if (deps[i] === 'exports') {\n        reified[i] = exports;\n      } else if (deps[i] === 'require') {\n        reified[i] = require;\n      } else {\n        reified[i] = require(deps[i], name);\n      }\n    }\n    callback.apply(this, reified);\n    return exports;\n  }\n  require = function (name) {\n    return internalRequire(name, null);\n  };\n  define = function (name, deps, callback) {\n    registry[name] = {\n      deps: deps,\n      callback: callback\n    };\n  };\n\n  // setup `require` module\n  require['default'] = require;\n  require.has = function registryHas(moduleName) {\n    return Boolean(registry[moduleName]) || Boolean(registry[moduleName + '/index']);\n  };\n  require._eak_seen = require.entries = registry;\n})();","define(\"@ember/debug/index\", [\"exports\", \"@ember/-internals/browser-environment\", \"@ember/debug/lib/deprecate\", \"@ember/debug/lib/testing\", \"@ember/debug/lib/warn\", \"@ember/debug/lib/inspect\", \"@ember/debug/lib/capture-render-tree\"], function (_exports, _browserEnvironment, _deprecate2, _testing, _warn2, _inspect, _captureRenderTree) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.assert = _exports._warnIfUsingStrippedFeatureFlags = void 0;\n  Object.defineProperty(_exports, \"captureRenderTree\", {\n    enumerable: true,\n    get: function () {\n      return _captureRenderTree.default;\n    }\n  });\n  _exports.info = _exports.getDebugFunction = _exports.deprecateFunc = _exports.deprecate = _exports.debugSeal = _exports.debugFreeze = _exports.debug = void 0;\n  Object.defineProperty(_exports, \"inspect\", {\n    enumerable: true,\n    get: function () {\n      return _inspect.default;\n    }\n  });\n  Object.defineProperty(_exports, \"isTesting\", {\n    enumerable: true,\n    get: function () {\n      return _testing.isTesting;\n    }\n  });\n  Object.defineProperty(_exports, \"registerDeprecationHandler\", {\n    enumerable: true,\n    get: function () {\n      return _deprecate2.registerHandler;\n    }\n  });\n  Object.defineProperty(_exports, \"registerWarnHandler\", {\n    enumerable: true,\n    get: function () {\n      return _warn2.registerHandler;\n    }\n  });\n  _exports.setDebugFunction = _exports.runInDebug = void 0;\n  Object.defineProperty(_exports, \"setTesting\", {\n    enumerable: true,\n    get: function () {\n      return _testing.setTesting;\n    }\n  });\n  _exports.warn = void 0;\n  // These are the default production build versions:\n  const noop = () => {};\n  // SAFETY: these casts are just straight-up lies, but the point is that they do\n  // not do anything in production builds.\n  let assert = _exports.assert = noop;\n  let info = _exports.info = noop;\n  let warn = _exports.warn = noop;\n  let debug = _exports.debug = noop;\n  let deprecate = _exports.deprecate = noop;\n  let debugSeal = _exports.debugSeal = noop;\n  let debugFreeze = _exports.debugFreeze = noop;\n  let runInDebug = _exports.runInDebug = noop;\n  let setDebugFunction = _exports.setDebugFunction = noop;\n  let getDebugFunction = _exports.getDebugFunction = noop;\n  let deprecateFunc = function () {\n    return arguments[arguments.length - 1];\n  };\n  _exports.deprecateFunc = deprecateFunc;\n  if (true /* DEBUG */) {\n    _exports.setDebugFunction = setDebugFunction = function (type, callback) {\n      switch (type) {\n        case 'assert':\n          return _exports.assert = assert = callback;\n        case 'info':\n          return _exports.info = info = callback;\n        case 'warn':\n          return _exports.warn = warn = callback;\n        case 'debug':\n          return _exports.debug = debug = callback;\n        case 'deprecate':\n          return _exports.deprecate = deprecate = callback;\n        case 'debugSeal':\n          return _exports.debugSeal = debugSeal = callback;\n        case 'debugFreeze':\n          return _exports.debugFreeze = debugFreeze = callback;\n        case 'runInDebug':\n          return _exports.runInDebug = runInDebug = callback;\n        case 'deprecateFunc':\n          return _exports.deprecateFunc = deprecateFunc = callback;\n      }\n    };\n    _exports.getDebugFunction = getDebugFunction = function (type) {\n      switch (type) {\n        case 'assert':\n          return assert;\n        case 'info':\n          return info;\n        case 'warn':\n          return warn;\n        case 'debug':\n          return debug;\n        case 'deprecate':\n          return deprecate;\n        case 'debugSeal':\n          return debugSeal;\n        case 'debugFreeze':\n          return debugFreeze;\n        case 'runInDebug':\n          return runInDebug;\n        case 'deprecateFunc':\n          return deprecateFunc;\n      }\n    };\n  }\n  /**\n  @module @ember/debug\n  */\n  if (true /* DEBUG */) {\n    // eslint-disable-next-line no-inner-declarations\n    function assert(desc, test) {\n      if (!test) {\n        throw new Error(`Assertion Failed: ${desc}`);\n      }\n    }\n    setDebugFunction('assert', assert);\n    /**\n      Display a debug notice.\n         Calls to this function are not invoked in production builds.\n         ```javascript\n      import { debug } from '@ember/debug';\n         debug('I\\'m a debug notice!');\n      ```\n         @method debug\n      @for @ember/debug\n      @static\n      @param {String} message A debug message to display.\n      @public\n    */\n    setDebugFunction('debug', function debug(message) {\n      console.debug(`DEBUG: ${message}`); /* eslint-disable-line no-console */\n    });\n    /**\n      Display an info notice.\n         Calls to this function are removed from production builds, so they can be\n      freely added for documentation and debugging purposes without worries of\n      incuring any performance penalty.\n         @method info\n      @private\n    */\n    setDebugFunction('info', function info() {\n      console.info(...arguments); /* eslint-disable-line no-console */\n    });\n    /**\n     @module @ember/debug\n     @public\n    */\n    /**\n      Alias an old, deprecated method with its new counterpart.\n         Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only) when the assigned method is called.\n         Calls to this function are removed from production builds, so they can be\n      freely added for documentation and debugging purposes without worries of\n      incuring any performance penalty.\n         ```javascript\n      import { deprecateFunc } from '@ember/debug';\n         Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);\n      ```\n         @method deprecateFunc\n      @static\n      @for @ember/debug\n      @param {String} message A description of the deprecation.\n      @param {Object} [options] The options object for `deprecate`.\n      @param {Function} func The new function called to replace its deprecated counterpart.\n      @return {Function} A new function that wraps the original function with a deprecation warning\n      @private\n    */\n    setDebugFunction('deprecateFunc', function deprecateFunc(...args) {\n      if (args.length === 3) {\n        let [message, options, func] = args;\n        return function (...args) {\n          deprecate(message, false, options);\n          return func.apply(this, args);\n        };\n      } else {\n        let [message, func] = args;\n        return function () {\n          deprecate(message);\n          return func.apply(this, arguments);\n        };\n      }\n    });\n    /**\n     @module @ember/debug\n     @public\n    */\n    /**\n      Run a function meant for debugging.\n         Calls to this function are removed from production builds, so they can be\n      freely added for documentation and debugging purposes without worries of\n      incuring any performance penalty.\n         ```javascript\n      import Component from '@ember/component';\n      import { runInDebug } from '@ember/debug';\n         runInDebug(() => {\n        Component.reopen({\n          didInsertElement() {\n            console.log(\"I'm happy\");\n          }\n        });\n      });\n      ```\n         @method runInDebug\n      @for @ember/debug\n      @static\n      @param {Function} func The function to be executed.\n      @since 1.5.0\n      @public\n    */\n    setDebugFunction('runInDebug', function runInDebug(func) {\n      func();\n    });\n    setDebugFunction('debugSeal', function debugSeal(obj) {\n      Object.seal(obj);\n    });\n    setDebugFunction('debugFreeze', function debugFreeze(obj) {\n      // re-freezing an already frozen object introduces a significant\n      // performance penalty on Chrome (tested through 59).\n      //\n      // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450\n      if (!Object.isFrozen(obj)) {\n        Object.freeze(obj);\n      }\n    });\n    setDebugFunction('deprecate', _deprecate2.default);\n    setDebugFunction('warn', _warn2.default);\n  }\n  let _warnIfUsingStrippedFeatureFlags = _exports._warnIfUsingStrippedFeatureFlags = void 0;\n  if (true /* DEBUG */ && !(0, _testing.isTesting)()) {\n    if (typeof window !== 'undefined' && (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) && window.addEventListener) {\n      window.addEventListener('load', () => {\n        if (document.documentElement && document.documentElement.dataset && !document.documentElement.dataset['emberExtension']) {\n          let downloadURL;\n          if (_browserEnvironment.isChrome) {\n            downloadURL = 'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';\n          } else if (_browserEnvironment.isFirefox) {\n            downloadURL = 'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';\n          }\n          debug(`For more advanced debugging, install the Ember Inspector from ${downloadURL}`);\n        }\n      }, false);\n    }\n  }\n});","define(\"@ember/debug/lib/capture-render-tree\", [\"exports\", \"@glimmer/util\"], function (_exports, _util) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = captureRenderTree;\n  /**\n    @module @ember/debug\n  */\n  /**\n    Ember Inspector calls this function to capture the current render tree.\n  \n    In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`\n    before loading Ember.\n  \n    @private\n    @static\n    @method captureRenderTree\n    @for @ember/debug\n    @param app {ApplicationInstance} An `ApplicationInstance`.\n    @since 3.14.0\n  */\n  function captureRenderTree(app) {\n    // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.\n    // This is only for debug stuff so not very risky.\n    let renderer = (0, _util.expect)(app.lookup('renderer:-dom'), `BUG: owner is missing renderer`);\n    return renderer.debugRenderTree.capture();\n  }\n});","define(\"@ember/debug/lib/deprecate\", [\"exports\", \"@ember/-internals/environment\", \"@ember/debug/index\", \"@ember/debug/lib/handlers\"], function (_exports, _environment, _index, _handlers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.missingOptionDeprecation = _exports.default = void 0;\n  /**\n   @module @ember/debug\n   @public\n  */\n  /**\n    Allows for runtime registration of handler functions that override the default deprecation behavior.\n    Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).\n    The following example demonstrates its usage by registering a handler that throws an error if the\n    message contains the word \"should\", otherwise defers to the default handler.\n  \n    ```javascript\n    import { registerDeprecationHandler } from '@ember/debug';\n  \n    registerDeprecationHandler((message, options, next) => {\n      if (message.indexOf('should') !== -1) {\n        throw new Error(`Deprecation message with should: ${message}`);\n      } else {\n        // defer to whatever handler was registered before this one\n        next(message, options);\n      }\n    });\n    ```\n  \n    The handler function takes the following arguments:\n  \n    <ul>\n      <li> <code>message</code> - The message received from the deprecation call.</li>\n      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n        <ul>\n          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n        </ul>\n      <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n    </ul>\n  \n    @public\n    @static\n    @method registerDeprecationHandler\n    @for @ember/debug\n    @param handler {Function} A function to handle deprecation calls.\n    @since 2.1.0\n  */\n  let registerHandler = () => {};\n  _exports.registerHandler = registerHandler;\n  let missingOptionsDeprecation = _exports.missingOptionsDeprecation = void 0;\n  let missingOptionsIdDeprecation = _exports.missingOptionsIdDeprecation = void 0;\n  let missingOptionDeprecation = () => '';\n  _exports.missingOptionDeprecation = missingOptionDeprecation;\n  let deprecate = () => {};\n  if (true /* DEBUG */) {\n    _exports.registerHandler = registerHandler = function registerHandler(handler) {\n      (0, _handlers.registerHandler)('deprecate', handler);\n    };\n    let formatMessage = function formatMessage(_message, options) {\n      let message = _message;\n      if (options?.id) {\n        message = message + ` [deprecation id: ${options.id}]`;\n      }\n      if (options?.until) {\n        message = message + ` This will be removed in ${options.for} ${options.until}.`;\n      }\n      if (options?.url) {\n        message += ` See ${options.url} for more details.`;\n      }\n      return message;\n    };\n    registerHandler(function logDeprecationToConsole(message, options) {\n      let updatedMessage = formatMessage(message, options);\n      console.warn(`DEPRECATION: ${updatedMessage}`); // eslint-disable-line no-console\n    });\n    let captureErrorForStack;\n    if (new Error().stack) {\n      captureErrorForStack = () => new Error();\n    } else {\n      captureErrorForStack = () => {\n        try {\n          __fail__.fail();\n          return;\n        } catch (e) {\n          return e;\n        }\n      };\n    }\n    registerHandler(function logDeprecationStackTrace(message, options, next) {\n      if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {\n        let stackStr = '';\n        let error = captureErrorForStack();\n        let stack;\n        if (error instanceof Error) {\n          if (error.stack) {\n            if (error['arguments']) {\n              // Chrome\n              stack = error.stack.replace(/^\\s+at\\s+/gm, '').replace(/^([^(]+?)([\\n$])/gm, '{anonymous}($1)$2').replace(/^Object.<anonymous>\\s*\\(([^)]+)\\)/gm, '{anonymous}($1)').split('\\n');\n              stack.shift();\n            } else {\n              // Firefox\n              stack = error.stack.replace(/(?:\\n@:0)?\\s+$/m, '').replace(/^\\(/gm, '{anonymous}(').split('\\n');\n            }\n            stackStr = `\\n    ${stack.slice(2).join('\\n    ')}`;\n          }\n        }\n        let updatedMessage = formatMessage(message, options);\n        console.warn(`DEPRECATION: ${updatedMessage}${stackStr}`); // eslint-disable-line no-console\n      } else {\n        next(message, options);\n      }\n    });\n    registerHandler(function raiseOnDeprecation(message, options, next) {\n      if (_environment.ENV.RAISE_ON_DEPRECATION) {\n        let updatedMessage = formatMessage(message);\n        throw new Error(updatedMessage);\n      } else {\n        next(message, options);\n      }\n    });\n    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `deprecate` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include `id` and `until` properties.';\n    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `deprecate` you must provide `id` in options.';\n    _exports.missingOptionDeprecation = missingOptionDeprecation = (id, missingOption) => {\n      return `When calling \\`deprecate\\` you must provide \\`${missingOption}\\` in options. Missing options.${missingOption} in \"${id}\" deprecation`;\n    };\n    /**\n     @module @ember/debug\n     @public\n     */\n    /**\n      Display a deprecation warning with the provided message and a stack trace\n      (Chrome and Firefox only).\n         Ember itself leverages [Semantic Versioning](https://semver.org) to aid\n      projects in keeping up with changes to the framework. Before any\n      functionality or API is removed, it first flows linearly through a\n      deprecation staging process. The staging process currently contains two\n      stages: available and enabled.\n         Deprecations are initially released into the 'available' stage.\n      Deprecations will stay in this stage until the replacement API has been\n      marked as a recommended practice via the RFC process and the addon\n      ecosystem has generally adopted the change.\n         Once a deprecation meets the above criteria, it will move into the\n      'enabled' stage where it will remain until the functionality or API is\n      eventually removed.\n         For application and addon developers, \"available\" deprecations are not\n      urgent and \"enabled\" deprecations require action.\n         * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n         ```javascript\n      import { deprecate } from '@ember/debug';\n         deprecate(\n        'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',\n        false,\n        {\n          id: 'ember-polyfills.deprecate-assign',\n          until: '5.0.0',\n          url: 'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',\n          for: 'ember-source',\n          since: {\n            available: '4.0.0',\n            enabled: '4.0.0',\n          },\n        }\n      );\n      ```\n         @method deprecate\n      @for @ember/debug\n      @param {String} message A description of the deprecation.\n      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.\n      @param {Object} options\n      @param {String} options.id A unique id for this deprecation. The id can be\n        used by Ember debugging tools to change the behavior (raise, log or silence)\n        for that specific deprecation. The id should be namespaced by dots, e.g.\n        \"view.helper.select\".\n      @param {string} options.until The version of Ember when this deprecation\n        warning will be removed.\n      @param {String} options.for A namespace for the deprecation, usually the package name\n      @param {Object} options.since Describes when the deprecation became available and enabled.\n      @param {String} [options.url] An optional url to the transition guide on the\n            emberjs.com website.\n      @static\n      @public\n      @since 1.0.0\n    */\n    deprecate = function deprecate(message, test, options) {\n      (0, _index.assert)(missingOptionsDeprecation, Boolean(options && (options.id || options.until)));\n      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options.id));\n      (0, _index.assert)(missingOptionDeprecation(options.id, 'until'), Boolean(options.until));\n      (0, _index.assert)(missingOptionDeprecation(options.id, 'for'), Boolean(options.for));\n      (0, _index.assert)(missingOptionDeprecation(options.id, 'since'), Boolean(options.since));\n      (0, _handlers.invoke)('deprecate', message, test, options);\n    };\n  }\n  var _default = _exports.default = deprecate;\n});","define(\"@ember/debug/lib/handlers\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.registerHandler = _exports.invoke = _exports.HANDLERS = void 0;\n  let HANDLERS = _exports.HANDLERS = {};\n  let registerHandler = _exports.registerHandler = function registerHandler(_type, _callback) {};\n  let invoke = () => {};\n  _exports.invoke = invoke;\n  if (true /* DEBUG */) {\n    _exports.registerHandler = registerHandler = function registerHandler(type, callback) {\n      let nextHandler = HANDLERS[type] || (() => {});\n      HANDLERS[type] = (message, options) => {\n        callback(message, options, nextHandler);\n      };\n    };\n    _exports.invoke = invoke = function invoke(type, message, test, options) {\n      if (test) {\n        return;\n      }\n      let handlerForType = HANDLERS[type];\n      if (handlerForType) {\n        handlerForType(message, options);\n      }\n    };\n  }\n});","define(\"@ember/debug/lib/inspect\", [\"exports\", \"@ember/debug\"], function (_exports, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = inspect;\n  const {\n    toString: objectToString\n  } = Object.prototype;\n  const {\n    toString: functionToString\n  } = Function.prototype;\n  const {\n    isArray\n  } = Array;\n  const {\n    keys: objectKeys\n  } = Object;\n  const {\n    stringify\n  } = JSON;\n  const LIST_LIMIT = 100;\n  const DEPTH_LIMIT = 4;\n  const SAFE_KEY = /^[\\w$]+$/;\n  /**\n   @module @ember/debug\n  */\n  /**\n    Convenience method to inspect an object. This method will attempt to\n    convert the object into a useful string description.\n  \n    It is a pretty simple implementation. If you want something more robust,\n    use something like JSDump: https://github.com/NV/jsDump\n  \n    @method inspect\n    @static\n    @param {Object} obj The object you want to inspect.\n    @return {String} A description of the object\n    @since 1.4.0\n    @private\n  */\n  function inspect(obj) {\n    // detect Node util.inspect call inspect(depth: number, opts: object)\n    if (typeof obj === 'number' && arguments.length === 2) {\n      return this;\n    }\n    return inspectValue(obj, 0);\n  }\n  function inspectValue(value, depth, seen) {\n    let valueIsArray = false;\n    switch (typeof value) {\n      case 'undefined':\n        return 'undefined';\n      case 'object':\n        if (value === null) return 'null';\n        if (isArray(value)) {\n          valueIsArray = true;\n          break;\n        }\n        // is toString Object.prototype.toString or undefined then traverse\n        if (value.toString === objectToString || value.toString === undefined) {\n          break;\n        }\n        // custom toString\n        return value.toString();\n      case 'function':\n        return value.toString === functionToString ? value.name ? `[Function:${value.name}]` : `[Function]` : value.toString();\n      case 'string':\n        return stringify(value);\n      case 'symbol':\n      case 'boolean':\n      case 'number':\n      default:\n        return value.toString();\n    }\n    if (seen === undefined) {\n      seen = new WeakSet();\n    } else {\n      if (seen.has(value)) return `[Circular]`;\n    }\n    seen.add(value);\n    return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);\n  }\n  function inspectKey(key) {\n    return SAFE_KEY.test(key) ? key : stringify(key);\n  }\n  function inspectObject(obj, depth, seen) {\n    if (depth > DEPTH_LIMIT) {\n      return '[Object]';\n    }\n    let s = '{';\n    let keys = objectKeys(obj);\n    for (let i = 0; i < keys.length; i++) {\n      s += i === 0 ? ' ' : ', ';\n      if (i >= LIST_LIMIT) {\n        s += `... ${keys.length - LIST_LIMIT} more keys`;\n        break;\n      }\n      let key = keys[i];\n      (true && !(key) && (0, _debug.assert)('has key', key)); // Looping over array\n      s += `${inspectKey(String(key))}: ${inspectValue(obj[key], depth, seen)}`;\n    }\n    s += ' }';\n    return s;\n  }\n  function inspectArray(arr, depth, seen) {\n    if (depth > DEPTH_LIMIT) {\n      return '[Array]';\n    }\n    let s = '[';\n    for (let i = 0; i < arr.length; i++) {\n      s += i === 0 ? ' ' : ', ';\n      if (i >= LIST_LIMIT) {\n        s += `... ${arr.length - LIST_LIMIT} more items`;\n        break;\n      }\n      s += inspectValue(arr[i], depth, seen);\n    }\n    s += ' ]';\n    return s;\n  }\n});","define(\"@ember/debug/lib/testing\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.isTesting = isTesting;\n  _exports.setTesting = setTesting;\n  let testing = false;\n  function isTesting() {\n    return testing;\n  }\n  function setTesting(value) {\n    testing = Boolean(value);\n  }\n});","define(\"@ember/debug/lib/warn\", [\"exports\", \"@ember/debug/index\", \"@ember/debug/lib/handlers\"], function (_exports, _index, _handlers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.default = void 0;\n  let registerHandler = () => {};\n  _exports.registerHandler = registerHandler;\n  let warn = () => {};\n  let missingOptionsDeprecation = _exports.missingOptionsDeprecation = void 0;\n  let missingOptionsIdDeprecation = _exports.missingOptionsIdDeprecation = void 0;\n  /**\n  @module @ember/debug\n  */\n  if (true /* DEBUG */) {\n    /**\n      Allows for runtime registration of handler functions that override the default warning behavior.\n      Warnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).\n      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's\n      default warning behavior.\n         ```javascript\n      import { registerWarnHandler } from '@ember/debug';\n         // next is not called, so no warnings get the default behavior\n      registerWarnHandler(() => {});\n      ```\n         The handler function takes the following arguments:\n         <ul>\n        <li> <code>message</code> - The message received from the warn call. </li>\n        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n          <ul>\n            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n          </ul>\n        <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n      </ul>\n         @public\n      @static\n      @method registerWarnHandler\n      @for @ember/debug\n      @param handler {Function} A function to handle warnings.\n      @since 2.1.0\n    */\n    _exports.registerHandler = registerHandler = function registerHandler(handler) {\n      (0, _handlers.registerHandler)('warn', handler);\n    };\n    registerHandler(function logWarning(message) {\n      /* eslint-disable no-console */\n      console.warn(`WARNING: ${message}`);\n      /* eslint-enable no-console */\n    });\n    _exports.missingOptionsDeprecation = missingOptionsDeprecation = 'When calling `warn` you ' + 'must provide an `options` hash as the third parameter.  ' + '`options` should include an `id` property.';\n    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation = 'When calling `warn` you must provide `id` in options.';\n    /**\n      Display a warning with the provided message.\n         * In a production build, this method is defined as an empty function (NOP).\n      Uses of this method in Ember itself are stripped from the ember.prod.js build.\n         ```javascript\n      import { warn } from '@ember/debug';\n      import tomsterCount from './tomster-counter'; // a module in my project\n         // Log a warning if we have more than 3 tomsters\n      warn('Too many tomsters!', tomsterCount <= 3, {\n        id: 'ember-debug.too-many-tomsters'\n      });\n      ```\n         @method warn\n      @for @ember/debug\n      @static\n      @param {String} message A warning to display.\n      @param {Boolean|Object} test An optional boolean. If falsy, the warning\n        will be displayed. If `test` is an object, the `test` parameter can\n        be used as the `options` parameter and the warning is displayed.\n      @param {Object} options\n      @param {String} options.id The `id` can be used by Ember debugging tools\n        to change the behavior (raise, log, or silence) for that specific warning.\n        The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"\n      @public\n      @since 1.0.0\n    */\n    warn = function warn(message, test, options) {\n      if (arguments.length === 2 && typeof test === 'object') {\n        options = test;\n        test = false;\n      }\n      (0, _index.assert)(missingOptionsDeprecation, Boolean(options));\n      (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options && options.id));\n      // SAFETY: we have explicitly assigned `false` if the user invoked the\n      // arity-2 version of the overload, so we know `test` is always either\n      // `undefined` or a `boolean` for type-safe callers.\n      (0, _handlers.invoke)('warn', message, test, options);\n    };\n  }\n  var _default = _exports.default = warn;\n});","define(\"ember-testing/index\", [\"exports\", \"ember-testing/lib/public-api\", \"@ember/test\"], function (_exports, EmberTesting, _test) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.keys(EmberTesting).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (key in _exports && _exports[key] === EmberTesting[key]) return;\n    Object.defineProperty(_exports, key, {\n      enumerable: true,\n      get: function () {\n        return EmberTesting[key];\n      }\n    });\n  });\n  (0, _test.registerTestImplementation)(EmberTesting);\n});","define(\"ember-testing/lib/adapters/adapter\", [\"exports\", \"@ember/object\"], function (_exports, _object) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  const Adapter = _object.default.extend({\n    /**\n      This callback will be called whenever an async operation is about to start.\n         Override this to call your framework's methods that handle async\n      operations.\n         @public\n      @method asyncStart\n    */\n    asyncStart() {},\n    /**\n      This callback will be called whenever an async operation has completed.\n         @public\n      @method asyncEnd\n    */\n    asyncEnd() {},\n    /**\n      Override this method with your testing framework's false assertion.\n      This function is called whenever an exception occurs causing the testing\n      promise to fail.\n         QUnit example:\n         ```javascript\n        exception: function(error) {\n          ok(false, error);\n        };\n      ```\n         @public\n      @method exception\n      @param {String} error The exception to be raised.\n    */\n    exception(error) {\n      throw error;\n    }\n  });\n  var _default = _exports.default = Adapter;\n});","define(\"ember-testing/lib/adapters/qunit\", [\"exports\", \"@ember/debug\", \"ember-testing/lib/adapters/adapter\"], function (_exports, _debug, _adapter) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  /* globals QUnit */\n\n  function isVeryOldQunit(obj) {\n    return obj != null && typeof obj.stop === 'function';\n  }\n  const QUnitAdapter = _adapter.default.extend({\n    init() {\n      this.doneCallbacks = [];\n    },\n    asyncStart() {\n      if (isVeryOldQunit(QUnit)) {\n        // very old QUnit version\n        // eslint-disable-next-line qunit/no-qunit-stop\n        QUnit.stop();\n      } else {\n        this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);\n      }\n    },\n    asyncEnd() {\n      // checking for QUnit.stop here (even though we _need_ QUnit.start) because\n      // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling\n      // inside a test context)\n      if (isVeryOldQunit(QUnit)) {\n        QUnit.start();\n      } else {\n        let done = this.doneCallbacks.pop();\n        // This can be null if asyncStart() was called outside of a test\n        if (done) {\n          done();\n        }\n      }\n    },\n    exception(error) {\n      QUnit.config.current.assert.ok(false, (0, _debug.inspect)(error));\n    }\n  });\n  var _default = _exports.default = QUnitAdapter;\n});","define(\"ember-testing/lib/ext/application\", [\"@ember/application\", \"ember-testing/lib/setup_for_testing\", \"ember-testing/lib/test/helpers\", \"ember-testing/lib/test/promise\", \"ember-testing/lib/test/run\", \"ember-testing/lib/test/on_inject_helpers\", \"ember-testing/lib/test/adapter\", \"@ember/debug\"], function (_application, _setup_for_testing, _helpers, _promise, _run, _on_inject_helpers, _adapter, _debug) {\n  \"use strict\";\n\n  _application.default.reopen({\n    /**\n     This property contains the testing helpers for the current application. These\n     are created once you call `injectTestHelpers` on your `Application`\n     instance. The included helpers are also available on the `window` object by\n     default, but can be used from this object on the individual application also.\n         @property testHelpers\n      @type {Object}\n      @default {}\n      @public\n    */\n    testHelpers: {},\n    /**\n     This property will contain the original methods that were registered\n     on the `helperContainer` before `injectTestHelpers` is called.\n        When `removeTestHelpers` is called, these methods are restored to the\n     `helperContainer`.\n         @property originalMethods\n      @type {Object}\n      @default {}\n      @private\n      @since 1.3.0\n    */\n    originalMethods: {},\n    /**\n    This property indicates whether or not this application is currently in\n    testing mode. This is set when `setupForTesting` is called on the current\n    application.\n       @property testing\n    @type {Boolean}\n    @default false\n    @since 1.3.0\n    @public\n    */\n    testing: false,\n    /**\n      This hook defers the readiness of the application, so that you can start\n      the app when your tests are ready to run. It also sets the router's\n      location to 'none', so that the window's location will not be modified\n      (preventing both accidental leaking of state between tests and interference\n      with your testing framework). `setupForTesting` should only be called after\n      setting a custom `router` class (for example `App.Router = Router.extend(`).\n         Example:\n         ```\n      App.setupForTesting();\n      ```\n         @method setupForTesting\n      @public\n    */\n    setupForTesting() {\n      (0, _setup_for_testing.default)();\n      this.testing = true;\n      this.resolveRegistration('router:main').reopen({\n        location: 'none'\n      });\n    },\n    /**\n      This will be used as the container to inject the test helpers into. By\n      default the helpers are injected into `window`.\n         @property helperContainer\n      @type {Object} The object to be used for test helpers.\n      @default window\n      @since 1.2.0\n      @private\n    */\n    helperContainer: null,\n    /**\n      This injects the test helpers into the `helperContainer` object. If an object is provided\n      it will be used as the helperContainer. If `helperContainer` is not set it will default\n      to `window`. If a function of the same name has already been defined it will be cached\n      (so that it can be reset if the helper is removed with `unregisterHelper` or\n      `removeTestHelpers`).\n         Any callbacks registered with `onInjectHelpers` will be called once the\n      helpers have been injected.\n         Example:\n      ```\n      App.injectTestHelpers();\n      ```\n         @method injectTestHelpers\n      @public\n    */\n    injectTestHelpers(helperContainer) {\n      if (helperContainer) {\n        this.helperContainer = helperContainer;\n      } else {\n        this.helperContainer = window;\n      }\n      this.reopen({\n        willDestroy() {\n          this._super(...arguments);\n          this.removeTestHelpers();\n        }\n      });\n      this.testHelpers = {};\n      for (let name in _helpers.helpers) {\n        // SAFETY: It is safe to access a property on an object\n        this.originalMethods[name] = this.helperContainer[name];\n        // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.\n        this.testHelpers[name] = this.helperContainer[name] = helper(this, name);\n        // SAFETY: We checked that it exists\n        protoWrap(_promise.default.prototype, name, helper(this, name), _helpers.helpers[name].meta.wait);\n      }\n      (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);\n    },\n    /**\n      This removes all helpers that have been registered, and resets and functions\n      that were overridden by the helpers.\n         Example:\n         ```javascript\n      App.removeTestHelpers();\n      ```\n         @public\n      @method removeTestHelpers\n    */\n    removeTestHelpers() {\n      if (!this.helperContainer) {\n        return;\n      }\n      for (let name in _helpers.helpers) {\n        this.helperContainer[name] = this.originalMethods[name];\n        // SAFETY: This is a weird thing, but it's not technically unsafe here.\n        delete _promise.default.prototype[name];\n        delete this.testHelpers[name];\n        delete this.originalMethods[name];\n      }\n    }\n  });\n  // This method is no longer needed\n  // But still here for backwards compatibility\n  // of helper chaining\n  function protoWrap(proto, name, callback, isAsync) {\n    // SAFETY: This isn't entirely safe, but it _seems_ to be ok.\n    proto[name] = function (...args) {\n      if (isAsync) {\n        return callback.apply(this, args);\n      } else {\n        // SAFETY: This is not actually safe.\n        return this.then(function () {\n          return callback.apply(this, args);\n        });\n      }\n    };\n  }\n  function helper(app, name) {\n    let helper = _helpers.helpers[name];\n    (true && !(helper) && (0, _debug.assert)(`[BUG] Missing helper: ${name}`, helper));\n    let fn = helper.method;\n    let meta = helper.meta;\n    if (!meta.wait) {\n      return (...args) => fn.apply(app, [app, ...args]);\n    }\n    return (...args) => {\n      let lastPromise = (0, _run.default)(() => (0, _promise.resolve)((0, _promise.getLastPromise)()));\n      // wait for last helper's promise to resolve and then\n      // execute. To be safe, we need to tell the adapter we're going\n      // asynchronous here, because fn may not be invoked before we\n      // return.\n      (0, _adapter.asyncStart)();\n      return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(_adapter.asyncEnd);\n    };\n  }\n});","define(\"ember-testing/lib/ext/rsvp\", [\"exports\", \"@ember/-internals/runtime\", \"@ember/runloop\"], function (_exports, _runtime, _runloop) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  _runtime.RSVP.configure('async', function (callback, promise) {\n    // if schedule will cause autorun, we need to inform adapter\n    _runloop._backburner.schedule('actions', () => callback(promise));\n  });\n  var _default = _exports.default = _runtime.RSVP;\n});","define(\"ember-testing/lib/helpers\", [\"ember-testing/lib/test/helpers\", \"ember-testing/lib/helpers/and_then\", \"ember-testing/lib/helpers/current_path\", \"ember-testing/lib/helpers/current_route_name\", \"ember-testing/lib/helpers/current_url\", \"ember-testing/lib/helpers/pause_test\", \"ember-testing/lib/helpers/visit\", \"ember-testing/lib/helpers/wait\"], function (_helpers, _and_then, _current_path, _current_route_name, _current_url, _pause_test, _visit, _wait) {\n  \"use strict\";\n\n  (0, _helpers.registerAsyncHelper)('visit', _visit.default);\n  (0, _helpers.registerAsyncHelper)('wait', _wait.default);\n  (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);\n  (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);\n  (0, _helpers.registerHelper)('currentRouteName', _current_route_name.default);\n  (0, _helpers.registerHelper)('currentPath', _current_path.default);\n  (0, _helpers.registerHelper)('currentURL', _current_url.default);\n  (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);\n});","define(\"ember-testing/lib/helpers/and_then\", [\"exports\", \"@ember/debug\"], function (_exports, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = andThen;\n  function andThen(app, callback) {\n    let wait = app.testHelpers['wait'];\n    (true && !(wait) && (0, _debug.assert)('[BUG] Missing wait helper', wait));\n    return wait(callback(app));\n  }\n});","define(\"ember-testing/lib/helpers/current_path\", [\"exports\", \"@ember/object\", \"@ember/routing/-internals\", \"@ember/debug\"], function (_exports, _object, _internals, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = currentPath;\n  /**\n  @module ember\n  */\n\n  /**\n    Returns the current path.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentPath\n  @return {Object} The currently active path.\n  @since 1.5.0\n  @public\n  */\n  function currentPath(app) {\n    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));\n    let routingService = app.__container__.lookup('service:-routing');\n    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));\n    return (0, _object.get)(routingService, 'currentPath');\n  }\n});","define(\"ember-testing/lib/helpers/current_route_name\", [\"exports\", \"@ember/object\", \"@ember/routing/-internals\", \"@ember/debug\"], function (_exports, _object, _internals, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = currentRouteName;\n  /**\n  @module ember\n  */\n\n  /**\n    Returns the currently active route name.\n  \n  Example:\n  \n  ```javascript\n  function validateRouteName() {\n    equal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n  }\n  visit('/some/path').then(validateRouteName)\n  ```\n  \n  @method currentRouteName\n  @return {Object} The name of the currently active route.\n  @since 1.5.0\n  @public\n  */\n  function currentRouteName(app) {\n    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));\n    let routingService = app.__container__.lookup('service:-routing');\n    (true && !(routingService instanceof _internals.RoutingService) && (0, _debug.assert)('[BUG] service:-routing is not a RoutingService', routingService instanceof _internals.RoutingService));\n    return (0, _object.get)(routingService, 'currentRouteName');\n  }\n});","define(\"ember-testing/lib/helpers/current_url\", [\"exports\", \"@ember/object\", \"@ember/debug\", \"@ember/routing/router\"], function (_exports, _object, _debug, _router) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = currentURL;\n  /**\n  @module ember\n  */\n\n  /**\n    Returns the current URL.\n  \n  Example:\n  \n  ```javascript\n  function validateURL() {\n    equal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n  }\n  \n  click('#some-link-id').then(validateURL);\n  ```\n  \n  @method currentURL\n  @return {Object} The currently active URL.\n  @since 1.5.0\n  @public\n  */\n  function currentURL(app) {\n    (true && !(app.__container__) && (0, _debug.assert)('[BUG] app.__container__ is not set', app.__container__));\n    let router = app.__container__.lookup('router:main');\n    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));\n    let location = (0, _object.get)(router, 'location');\n    (true && !(typeof location !== 'string') && (0, _debug.assert)('[BUG] location is still a string', typeof location !== 'string'));\n    return location.getURL();\n  }\n});","define(\"ember-testing/lib/helpers/pause_test\", [\"exports\", \"@ember/-internals/runtime\", \"@ember/debug\"], function (_exports, _runtime, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.pauseTest = pauseTest;\n  _exports.resumeTest = resumeTest;\n  /**\n  @module ember\n  */\n\n  let resume;\n  /**\n   Resumes a test paused by `pauseTest`.\n  \n   @method resumeTest\n   @return {void}\n   @public\n  */\n  function resumeTest() {\n    (true && !(resume) && (0, _debug.assert)('Testing has not been paused. There is nothing to resume.', resume));\n    resume();\n    resume = undefined;\n  }\n  /**\n   Pauses the current test - this is useful for debugging while testing or for test-driving.\n   It allows you to inspect the state of your application at any point.\n   Example (The test will pause before clicking the button):\n  \n   ```javascript\n   visit('/')\n   return pauseTest();\n   click('.btn');\n   ```\n  \n   You may want to turn off the timeout before pausing.\n  \n   qunit (timeout available to use as of 2.4.0):\n  \n   ```\n   visit('/');\n   assert.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n  \n   mocha (timeout happens automatically as of ember-mocha v0.14.0):\n  \n   ```\n   visit('/');\n   this.timeout(0);\n   return pauseTest();\n   click('.btn');\n   ```\n  \n  \n   @since 1.9.0\n   @method pauseTest\n   @return {Object} A promise that will never resolve\n   @public\n  */\n  function pauseTest() {\n    (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');\n    return new _runtime.RSVP.Promise(resolve => {\n      resume = resolve;\n    }, 'TestAdapter paused promise');\n  }\n});","define(\"ember-testing/lib/helpers/visit\", [\"exports\", \"@ember/debug\", \"@ember/routing/router\", \"@ember/runloop\"], function (_exports, _debug, _router, _runloop) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = visit;\n  /**\n    Loads a route, sets up any controllers, and renders any templates associated\n    with the route as though a real user had triggered the route change while\n    using your app.\n  \n    Example:\n  \n    ```javascript\n    visit('posts/index').then(function() {\n      // assert something\n    });\n    ```\n  \n    @method visit\n    @param {String} url the name of the route\n    @return {RSVP.Promise<undefined>}\n    @public\n  */\n  function visit(app, url) {\n    (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));\n    const router = app.__container__.lookup('router:main');\n    (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] router:main is not a Router', router instanceof _router.default));\n    let shouldHandleURL = false;\n    app.boot().then(() => {\n      (true && !(typeof router.location !== 'string') && (0, _debug.assert)('[BUG] router.location is still a string', typeof router.location !== 'string'));\n      router.location.setURL(url);\n      if (shouldHandleURL) {\n        (true && !(app.__deprecatedInstance__) && (0, _debug.assert)(\"[BUG] __deprecatedInstance__ isn't set\", app.__deprecatedInstance__));\n        (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);\n      }\n    });\n    if (app._readinessDeferrals > 0) {\n      // SAFETY: This should be safe, though it is odd.\n      router.initialURL = url;\n      (0, _runloop.run)(app, 'advanceReadiness');\n      delete router.initialURL;\n    } else {\n      shouldHandleURL = true;\n    }\n    let wait = app.testHelpers['wait'];\n    (true && !(wait) && (0, _debug.assert)('[BUG] missing wait helper', wait));\n    return wait();\n  }\n});","define(\"ember-testing/lib/helpers/wait\", [\"exports\", \"ember-testing/lib/test/waiters\", \"@ember/-internals/runtime\", \"@ember/runloop\", \"ember-testing/lib/test/pending_requests\", \"@ember/debug\", \"@ember/routing/router\"], function (_exports, _waiters, _runtime, _runloop, _pending_requests, _debug, _router) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = wait;\n  /**\n  @module ember\n  */\n\n  /**\n    Causes the run loop to process any pending events. This is used to ensure that\n    any async operations from other helpers (or your assertions) have been processed.\n  \n    This is most often used as the return value for the helper functions (see 'click',\n    'fillIn','visit',etc). However, there is a method to register a test helper which\n    utilizes this method without the need to actually call `wait()` in your helpers.\n  \n    The `wait` helper is built into `registerAsyncHelper` by default. You will not need\n    to `return app.testHelpers.wait();` - the wait behavior is provided for you.\n  \n    Example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n  \n    registerAsyncHelper('loginUser', function(app, username, password) {\n      visit('secured/path/here')\n        .fillIn('#username', username)\n        .fillIn('#password', password)\n        .click('.submit');\n    });\n    ```\n  \n    @method wait\n    @param {Object} value The value to be returned.\n    @return {RSVP.Promise<any>} Promise that resolves to the passed value.\n    @public\n    @since 1.0.0\n  */\n  function wait(app, value) {\n    return new _runtime.RSVP.Promise(function (resolve) {\n      (true && !(app.__container__) && (0, _debug.assert)('[BUG] Missing container', app.__container__));\n      const router = app.__container__.lookup('router:main');\n      (true && !(router instanceof _router.default) && (0, _debug.assert)('[BUG] Expected router:main to be a subclass of Ember Router', router instanceof _router.default)); // Every 10ms, poll for the async thing to have finished\n      let watcher = setInterval(() => {\n        // 1. If the router is loading, keep polling\n        let routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);\n        if (routerIsLoading) {\n          return;\n        }\n        // 2. If there are pending Ajax requests, keep polling\n        if ((0, _pending_requests.pendingRequests)()) {\n          return;\n        }\n        // 3. If there are scheduled timers or we are inside of a run loop, keep polling\n        if ((0, _runloop._hasScheduledTimers)() || (0, _runloop._getCurrentRunLoop)()) {\n          return;\n        }\n        if ((0, _waiters.checkWaiters)()) {\n          return;\n        }\n        // Stop polling\n        clearInterval(watcher);\n        // Synchronously resolve the promise\n        (0, _runloop.run)(null, resolve, value);\n      }, 10);\n    });\n  }\n});","define(\"ember-testing/lib/initializers\", [\"@ember/application\"], function (_application) {\n  \"use strict\";\n\n  let name = 'deferReadiness in `testing` mode';\n  (0, _application.onLoad)('Ember.Application', function (ApplicationClass) {\n    if (!ApplicationClass.initializers[name]) {\n      ApplicationClass.initializer({\n        name: name,\n        initialize(application) {\n          if (application.testing) {\n            application.deferReadiness();\n          }\n        }\n      });\n    }\n  });\n});","define(\"ember-testing/lib/public-api\", [\"exports\", \"ember-testing/lib/test\", \"ember-testing/lib/adapters/adapter\", \"ember-testing/lib/setup_for_testing\", \"ember-testing/lib/adapters/qunit\", \"ember-testing/lib/ext/application\", \"ember-testing/lib/ext/rsvp\", \"ember-testing/lib/helpers\", \"ember-testing/lib/initializers\"], function (_exports, _test, _adapter, _setup_for_testing, _qunit, _application, _rsvp, _helpers, _initializers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"Adapter\", {\n    enumerable: true,\n    get: function () {\n      return _adapter.default;\n    }\n  });\n  Object.defineProperty(_exports, \"QUnitAdapter\", {\n    enumerable: true,\n    get: function () {\n      return _qunit.default;\n    }\n  });\n  Object.defineProperty(_exports, \"Test\", {\n    enumerable: true,\n    get: function () {\n      return _test.default;\n    }\n  });\n  Object.defineProperty(_exports, \"setupForTesting\", {\n    enumerable: true,\n    get: function () {\n      return _setup_for_testing.default;\n    }\n  });\n});","define(\"ember-testing/lib/setup_for_testing\", [\"exports\", \"@ember/debug\", \"ember-testing/lib/test/adapter\", \"ember-testing/lib/adapters/adapter\", \"ember-testing/lib/adapters/qunit\"], function (_exports, _debug, _adapter, _adapter2, _qunit) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = setupForTesting;\n  /* global self */\n\n  /**\n    Sets Ember up for testing. This is useful to perform\n    basic setup steps in order to unit test.\n  \n    Use `App.setupForTesting` to perform integration tests (full\n    application testing).\n  \n    @method setupForTesting\n    @namespace Ember\n    @since 1.5.0\n    @private\n  */\n  function setupForTesting() {\n    (0, _debug.setTesting)(true);\n    let adapter = (0, _adapter.getAdapter)();\n    // if adapter is not manually set default to QUnit\n    if (!adapter) {\n      (0, _adapter.setAdapter)(typeof self.QUnit === 'undefined' ? _adapter2.default.create() : _qunit.default.create());\n    }\n  }\n});","define(\"ember-testing/lib/test\", [\"exports\", \"ember-testing/lib/test/helpers\", \"ember-testing/lib/test/on_inject_helpers\", \"ember-testing/lib/test/promise\", \"ember-testing/lib/test/waiters\", \"ember-testing/lib/test/adapter\"], function (_exports, _helpers, _on_inject_helpers, _promise, _waiters, _adapter) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  /**\n    @module ember\n  */\n\n  /**\n    This is a container for an assortment of testing related functionality:\n  \n    * Choose your default test adapter (for your framework of choice).\n    * Register/Unregister additional test helpers.\n    * Setup callbacks to be fired when the test helpers are injected into\n      your application.\n  \n    @class Test\n    @namespace Ember\n    @public\n  */\n  const Test = {\n    /**\n      Hash containing all known test helpers.\n         @property _helpers\n      @private\n      @since 1.7.0\n    */\n    _helpers: _helpers.helpers,\n    registerHelper: _helpers.registerHelper,\n    registerAsyncHelper: _helpers.registerAsyncHelper,\n    unregisterHelper: _helpers.unregisterHelper,\n    onInjectHelpers: _on_inject_helpers.onInjectHelpers,\n    Promise: _promise.default,\n    promise: _promise.promise,\n    resolve: _promise.resolve,\n    registerWaiter: _waiters.registerWaiter,\n    unregisterWaiter: _waiters.unregisterWaiter,\n    checkWaiters: _waiters.checkWaiters\n  };\n  /**\n   Used to allow ember-testing to communicate with a specific testing\n   framework.\n  \n   You can manually set it before calling `App.setupForTesting()`.\n  \n   Example:\n  \n   ```javascript\n   Ember.Test.adapter = MyCustomAdapter.create()\n   ```\n  \n   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.\n  \n   @public\n   @for Ember.Test\n   @property adapter\n   @type {Class} The adapter to be used.\n   @default Ember.Test.QUnitAdapter\n  */\n  Object.defineProperty(Test, 'adapter', {\n    get: _adapter.getAdapter,\n    set: _adapter.setAdapter\n  });\n  var _default = _exports.default = Test;\n});","define(\"ember-testing/lib/test/adapter\", [\"exports\", \"@ember/-internals/error-handling\"], function (_exports, _errorHandling) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.asyncEnd = asyncEnd;\n  _exports.asyncStart = asyncStart;\n  _exports.getAdapter = getAdapter;\n  _exports.setAdapter = setAdapter;\n  let adapter;\n  function getAdapter() {\n    return adapter;\n  }\n  function setAdapter(value) {\n    adapter = value;\n    if (value && typeof value.exception === 'function') {\n      (0, _errorHandling.setDispatchOverride)(adapterDispatch);\n    } else {\n      (0, _errorHandling.setDispatchOverride)(null);\n    }\n  }\n  function asyncStart() {\n    if (adapter) {\n      adapter.asyncStart();\n    }\n  }\n  function asyncEnd() {\n    if (adapter) {\n      adapter.asyncEnd();\n    }\n  }\n  function adapterDispatch(error) {\n    adapter.exception(error);\n    // @ts-expect-error Normally unreachable\n    console.error(error.stack); // eslint-disable-line no-console\n  }\n});","define(\"ember-testing/lib/test/helpers\", [\"exports\", \"ember-testing/lib/test/promise\"], function (_exports, _promise) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.helpers = void 0;\n  _exports.registerAsyncHelper = registerAsyncHelper;\n  _exports.registerHelper = registerHelper;\n  _exports.unregisterHelper = unregisterHelper;\n  const helpers = _exports.helpers = {};\n  /**\n   @module @ember/test\n  */\n  /**\n    `registerHelper` is used to register a test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    import { registerHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n  \n    registerHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n  \n    This helper can later be called without arguments because it will be\n    called with `app` as the first parameter.\n  \n    ```javascript\n    import Application from '@ember/application';\n  \n    App = Application.create();\n    App.injectTestHelpers();\n    boot();\n    ```\n  \n    @public\n    @for @ember/test\n    @static\n    @method registerHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @param options {Object}\n  */\n  function registerHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: {\n        wait: false\n      }\n    };\n  }\n  /**\n    `registerAsyncHelper` is used to register an async test helper that will be injected\n    when `App.injectTestHelpers` is called.\n  \n    The helper method will always be called with the current Application as\n    the first parameter.\n  \n    For example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n    import { run } from '@ember/runloop';\n  \n    registerAsyncHelper('boot', function(app) {\n      run(app, app.advanceReadiness);\n    });\n    ```\n  \n    The advantage of an async helper is that it will not run\n    until the last async helper has completed.  All async helpers\n    after it will wait for it complete before running.\n  \n  \n    For example:\n  \n    ```javascript\n    import { registerAsyncHelper } from '@ember/test';\n  \n    registerAsyncHelper('deletePost', function(app, postId) {\n      click('.delete-' + postId);\n    });\n  \n    // ... in your test\n    visit('/post/2');\n    deletePost(2);\n    visit('/post/3');\n    deletePost(3);\n    ```\n  \n    @public\n    @for @ember/test\n    @method registerAsyncHelper\n    @param {String} name The name of the helper method to add.\n    @param {Function} helperMethod\n    @since 1.2.0\n  */\n  function registerAsyncHelper(name, helperMethod) {\n    helpers[name] = {\n      method: helperMethod,\n      meta: {\n        wait: true\n      }\n    };\n  }\n  /**\n    Remove a previously added helper method.\n  \n    Example:\n  \n    ```javascript\n    import { unregisterHelper } from '@ember/test';\n  \n    unregisterHelper('wait');\n    ```\n  \n    @public\n    @method unregisterHelper\n    @static\n    @for @ember/test\n    @param {String} name The helper to remove.\n  */\n  function unregisterHelper(name) {\n    delete helpers[name];\n    // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here\n    // it won't error.\n    delete _promise.default.prototype[name];\n  }\n});","define(\"ember-testing/lib/test/on_inject_helpers\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.callbacks = void 0;\n  _exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;\n  _exports.onInjectHelpers = onInjectHelpers;\n  const callbacks = _exports.callbacks = [];\n  /**\n    Used to register callbacks to be fired whenever `App.injectTestHelpers`\n    is called.\n  \n    The callback will receive the current application as an argument.\n  \n    Example:\n  \n    ```javascript\n    import $ from 'jquery';\n  \n    Ember.Test.onInjectHelpers(function() {\n      $(document).ajaxSend(function() {\n        Test.pendingRequests++;\n      });\n  \n      $(document).ajaxComplete(function() {\n        Test.pendingRequests--;\n      });\n    });\n    ```\n  \n    @public\n    @for Ember.Test\n    @method onInjectHelpers\n    @param {Function} callback The function to be called.\n  */\n  function onInjectHelpers(callback) {\n    callbacks.push(callback);\n  }\n  function invokeInjectHelpersCallbacks(app) {\n    for (let callback of callbacks) {\n      callback(app);\n    }\n  }\n});","define(\"ember-testing/lib/test/pending_requests\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.clearPendingRequests = clearPendingRequests;\n  _exports.decrementPendingRequests = decrementPendingRequests;\n  _exports.incrementPendingRequests = incrementPendingRequests;\n  _exports.pendingRequests = pendingRequests;\n  let requests = [];\n  function pendingRequests() {\n    return requests.length;\n  }\n  function clearPendingRequests() {\n    requests.length = 0;\n  }\n  function incrementPendingRequests(_, xhr) {\n    requests.push(xhr);\n  }\n  function decrementPendingRequests(_, xhr) {\n    setTimeout(function () {\n      for (let i = 0; i < requests.length; i++) {\n        if (xhr === requests[i]) {\n          requests.splice(i, 1);\n          break;\n        }\n      }\n    }, 0);\n  }\n});","define(\"ember-testing/lib/test/promise\", [\"exports\", \"@ember/-internals/runtime\", \"ember-testing/lib/test/run\"], function (_exports, _runtime, _run) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  _exports.getLastPromise = getLastPromise;\n  _exports.promise = promise;\n  _exports.resolve = resolve;\n  let lastPromise = null;\n  class TestPromise extends _runtime.RSVP.Promise {\n    constructor(executor, label) {\n      super(executor, label);\n      lastPromise = this;\n    }\n    then(onFulfilled, onRejected, label) {\n      let normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;\n      return super.then(normalizedOnFulfilled, onRejected, label);\n    }\n  }\n  /**\n    This returns a thenable tailored for testing.  It catches failed\n    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\n    callback in the last chained then.\n  \n    This method should be returned by async helpers such as `wait`.\n  \n    @public\n    @for Ember.Test\n    @method promise\n    @param {Function} resolver The function used to resolve the promise.\n    @param {String} label An optional string for identifying the promise.\n  */\n  _exports.default = TestPromise;\n  function promise(resolver, label) {\n    let fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;\n    return new TestPromise(resolver, fullLabel);\n  }\n  /**\n    Replacement for `Ember.RSVP.resolve`\n    The only difference is this uses\n    an instance of `Ember.Test.Promise`\n  \n    @public\n    @for Ember.Test\n    @method resolve\n    @param {Mixed} The value to resolve\n    @since 1.2.0\n  */\n  function resolve(result, label) {\n    return TestPromise.resolve(result, label);\n  }\n  function getLastPromise() {\n    return lastPromise;\n  }\n  // This method isolates nested async methods\n  // so that they don't conflict with other last promises.\n  //\n  // 1. Set `Ember.Test.lastPromise` to null\n  // 2. Invoke method\n  // 3. Return the last promise created during method\n  function isolate(onFulfilled, result) {\n    // Reset lastPromise for nested helpers\n    lastPromise = null;\n    let value = onFulfilled(result);\n    let promise = lastPromise;\n    lastPromise = null;\n    // If the method returned a promise\n    // return that promise. If not,\n    // return the last async helper's promise\n    if (value && value instanceof TestPromise || !promise) {\n      return value;\n    } else {\n      return (0, _run.default)(() => resolve(promise).then(() => value));\n    }\n  }\n});","define(\"ember-testing/lib/test/run\", [\"exports\", \"@ember/runloop\"], function (_exports, _runloop) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = run;\n  function run(fn) {\n    if (!(0, _runloop._getCurrentRunLoop)()) {\n      return (0, _runloop.run)(fn);\n    } else {\n      return fn();\n    }\n  }\n});","define(\"ember-testing/lib/test/waiters\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.checkWaiters = checkWaiters;\n  _exports.registerWaiter = registerWaiter;\n  _exports.unregisterWaiter = unregisterWaiter;\n  /**\n   @module @ember/test\n  */\n  const contexts = [];\n  const callbacks = [];\n  function registerWaiter(\n  // Formatting makes a pretty big difference in how readable this is.\n  // prettier-ignore\n  ...args) {\n    let checkedCallback;\n    let checkedContext;\n    if (args.length === 1) {\n      checkedContext = null;\n      checkedCallback = args[0];\n    } else {\n      checkedContext = args[0];\n      checkedCallback = args[1];\n    }\n    if (indexOf(checkedContext, checkedCallback) > -1) {\n      return;\n    }\n    contexts.push(checkedContext);\n    callbacks.push(checkedCallback);\n  }\n  /**\n     `unregisterWaiter` is used to unregister a callback that was\n     registered with `registerWaiter`.\n  \n     @public\n     @for @ember/test\n     @static\n     @method unregisterWaiter\n     @param {Object} context (optional)\n     @param {Function} callback\n     @since 1.2.0\n  */\n  function unregisterWaiter(context, callback) {\n    if (!callbacks.length) {\n      return;\n    }\n    if (arguments.length === 1) {\n      callback = context;\n      context = null;\n    }\n    let i = indexOf(context, callback);\n    if (i === -1) {\n      return;\n    }\n    contexts.splice(i, 1);\n    callbacks.splice(i, 1);\n  }\n  /**\n    Iterates through each registered test waiter, and invokes\n    its callback. If any waiter returns false, this method will return\n    true indicating that the waiters have not settled yet.\n  \n    This is generally used internally from the acceptance/integration test\n    infrastructure.\n  \n    @public\n    @for @ember/test\n    @static\n    @method checkWaiters\n  */\n  function checkWaiters() {\n    if (!callbacks.length) {\n      return false;\n    }\n    for (let i = 0; i < callbacks.length; i++) {\n      let context = contexts[i];\n      let callback = callbacks[i];\n      // SAFETY: The loop ensures that this exists\n      if (!callback.call(context)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function indexOf(context, callback) {\n    for (let i = 0; i < callbacks.length; i++) {\n      if (callbacks[i] === callback && contexts[i] === context) {\n        return i;\n      }\n    }\n    return -1;\n  }\n});","(function() {\n  var key = '_embroider_macros_runtime_config';\n  if (!window[key]) {\n    window[key] = [];\n  }\n  window[key].push(function(m) {\n    m.setGlobalConfig(\n      '@embroider/macros',\n      Object.assign({}, m.getGlobalConfig()['@embroider/macros'], { isTesting: true })\n    );\n  });\n})();\n","(function(define){\n(function() {\n  (function (exports) {\n    'use strict';\n\n    const process = (typeof globalThis !== \"undefined\" && globalThis.process) || {};\n    process.env = process.env || {};\n    process.env.__PERCY_BROWSERIFIED__ = true;\n\n    // helper to create a version object from a string\n    function toVersion(str) {\n      str || (str = '0.0.0');\n      return str.split(/\\.|-/).reduce((version, part, i) => {\n        let v = parseInt(part, 10);\n        version[i] = isNaN(v) ? part : v;\n        return version;\n      }, {\n        get major() {\n          return this[0] || 0;\n        },\n        get minor() {\n          return this[1] || 0;\n        },\n        get patch() {\n          return this[2] || 0;\n        },\n        get prerelease() {\n          return this[3];\n        },\n        get build() {\n          return this[4];\n        },\n        toString() {\n          return str;\n        }\n      });\n    }\n\n    // private version cache\n    let version = toVersion();\n    let type;\n\n    // contains local percy info\n    const info = {\n      // get or set the CLI API address via the environment\n      get address() {\n        return process.env.PERCY_SERVER_ADDRESS || 'http://localhost:5338';\n      },\n      set address(addr) {\n        return process.env.PERCY_SERVER_ADDRESS = addr;\n      },\n      // version information\n      get version() {\n        return version;\n      },\n      set version(v) {\n        return version = toVersion(v);\n      },\n      get type() {\n        return type;\n      },\n      set type(t) {\n        return type = t;\n      }\n    };\n\n    // Helper to send a request to the local CLI API\n    async function request(path) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let url = path.startsWith('http') ? path : `${info.address}${path}`;\n      let response = await request.fetch(url, options);\n\n      // maybe parse response body as json\n      if (typeof response.body === 'string' && response.headers['content-type'] === 'application/json') {\n        try {\n          response.body = JSON.parse(response.body);\n        } catch (e) {}\n      }\n\n      // throw an error if status is not ok\n      if (!(response.status >= 200 && response.status < 300)) {\n        throw Object.assign(new Error(), {\n          message: response.body.error || /* istanbul ignore next: in tests, there's always an error message */\n          `${response.status} ${response.statusText}`,\n          response\n        });\n      }\n      return response;\n    }\n    request.post = function post(url, json) {\n      return request(url, {\n        method: 'POST',\n        body: JSON.stringify(json),\n        timeout: 600000\n      });\n    };\n\n    // environment specific implementation\n    if (process.env.__PERCY_BROWSERIFIED__) {\n      // use window.fetch in browsers\n      const winFetch = window.fetch;\n      request.fetch = async function fetch(url, options) {\n        let response = await winFetch(url, options);\n        return {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: await response.text()\n        };\n      };\n    } else {\n      // use http.request in node\n      request.fetch = async function fetch(url, options) {\n        let {\n          protocol\n        } = new URL(url);\n        // rollup throws error for -> await ({})\n        let {\n          default: http\n        } = protocol === 'https:' ? await ({}) : await ({});\n        return new Promise((resolve, reject) => {\n          http.request(url, options).on('response', response => {\n            let body = '';\n            response.on('data', chunk => body += chunk.toString());\n            response.on('end', () => resolve({\n              status: response.statusCode,\n              statusText: response.statusMessage,\n              headers: response.headers,\n              body\n            }));\n          }).on('error', reject).end(options.body);\n        });\n      };\n    }\n\n    // Used when determining if a message should be logged\n    const LOG_LEVELS = {\n      debug: 0,\n      info: 1,\n      warn: 2,\n      error: 3\n    };\n\n    // Create a small logger util using the specified namespace\n    function logger(namespace) {\n      return Object.keys(LOG_LEVELS).reduce((ns, lvl) => Object.assign(ns, {\n        [lvl]: function () {\n          for (var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++) {\n            a[_key] = arguments[_key];\n          }\n          return logger.log(namespace, lvl, ...a);\n        }\n      }), {});\n    }\n    Object.assign(logger, {\n      // Set and/or return the local loglevel\n      loglevel: function () {\n        let lvl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : logger.loglevel.lvl;\n        return logger.loglevel.lvl = lvl || process.env.PERCY_LOGLEVEL || 'info';\n      },\n      // Track and send/write logs for the specified namespace and log level\n      // remote should only be false in case of sensitive/self call for errors\n      log: function (ns, lvl, msg, meta) {\n        let remote = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        let err = typeof msg !== 'string' && (lvl === 'error' || lvl === 'debug');\n\n        // check if the specific level is within the local loglevel range\n        if (LOG_LEVELS[lvl] != null && LOG_LEVELS[lvl] >= LOG_LEVELS[logger.loglevel()]) {\n          let debug = logger.loglevel() === 'debug';\n          let label = debug ? `percy:${ns}` : 'percy';\n\n          // colorize the label when possible for consistency with the CLI logger\n          if (!process.env.__PERCY_BROWSERIFIED__) label = `\\u001b[95m${label}\\u001b[39m`;\n          msg = `[${label}] ${err && debug && msg.stack || msg}`;\n          if (process.env.__PERCY_BROWSERIFIED__) {\n            // use console[warn|error|log] in browsers\n            console[['warn', 'error'].includes(lvl) ? lvl : 'log'](msg);\n          } else {\n            // use process[stdout|stderr].write in node\n            process[lvl === 'info' ? 'stdout' : 'stderr'].write(msg + '\\n');\n          }\n          if (remote && (lvl === 'error' || debug)) {\n            return request.post('/percy/log', {\n              level: lvl,\n              message: msg,\n              meta\n            }).catch(_ => {\n              logger.log(ns, 'error', 'Could not send logs to cli', meta, false);\n            });\n          }\n        }\n      }\n    });\n\n    // Check if Percy is enabled using the healthcheck endpoint\n    async function isPercyEnabled() {\n      if (info.enabled == null) {\n        let log = logger('utils');\n        let error;\n        try {\n          let response = await request('/percy/healthcheck');\n          info.version = response.headers['x-percy-core-version'];\n          info.config = response.body.config;\n          info.build = response.body.build;\n          info.enabled = true;\n          info.type = response.body.type;\n        } catch (e) {\n          info.enabled = false;\n          error = e;\n        }\n        if (info.enabled && info.version.major !== 1) {\n          log.info('Unsupported Percy CLI version, disabling snapshots');\n          log.debug(`Found version: ${info.version}`);\n          info.enabled = false;\n        } else if (!info.enabled) {\n          log.info('Percy is not running, disabling snapshots');\n          log.debug(error);\n        }\n      }\n      return info.enabled;\n    }\n\n    const RETRY_ERROR_CODES = ['ECONNRESET', 'ETIMEDOUT'];\n    async function waitForPercyIdle() {\n      try {\n        return !!(await request('/percy/idle'));\n      } catch (e) {\n        return RETRY_ERROR_CODES.includes(e.code) && waitForPercyIdle();\n      }\n    }\n\n    // Fetch and cache the @percy/dom script\n    async function fetchPercyDOM() {\n      if (info.domScript == null) {\n        let response = await request('/percy/dom.js');\n        info.domScript = response.body;\n      }\n      return info.domScript;\n    }\n\n    // Post snapshot data to the CLI snapshot endpoint. If the endpoint responds with a build error,\n    // indicate that Percy has been disabled.\n    async function postSnapshot(options, params) {\n      let query = params ? `?${new URLSearchParams(params)}` : '';\n      return await request.post(`/percy/snapshot${query}`, options).catch(err => {\n        var _err$response, _err$response$body, _err$response$body$bu;\n        if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$body = _err$response.body) !== null && _err$response$body !== void 0 && (_err$response$body$bu = _err$response$body.build) !== null && _err$response$body$bu !== void 0 && _err$response$body$bu.error) {\n          info.enabled = false;\n        } else {\n          throw err;\n        }\n      });\n    }\n\n    // Post snapshot data to the CLI snapshot endpoint. If the endpoint responds with a build error,\n    // indicate that Percy has been disabled.\n    async function postComparison(options, params) {\n      let query = params ? `?${new URLSearchParams(params)}` : '';\n      return await request.post(`/percy/comparison${query}`, options).catch(err => {\n        var _err$response, _err$response$body, _err$response$body$bu;\n        if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$body = _err$response.body) !== null && _err$response$body !== void 0 && (_err$response$body$bu = _err$response$body.build) !== null && _err$response$body$bu !== void 0 && _err$response$body$bu.error) {\n          info.enabled = false;\n        } else {\n          throw err;\n        }\n      });\n    }\n\n    // Post failed event data to the CLI event endpoint.\n    async function postBuildEvents(options) {\n      return await request.post('/percy/events', options).catch(err => {\n        throw err;\n      });\n    }\n\n    // Posts to the local Percy server one or more snapshots to flush. Given no arguments, all snapshots\n    // will be flushed. Does nothing when Percy is not enabled.\n    async function flushSnapshots(options) {\n      if (info.enabled) {\n        // accept one or more snapshot names\n        options && (options = [].concat(options).map(o => typeof o === 'string' ? {\n          name: o\n        } : o));\n        await request.post('/percy/flush', options);\n      }\n    }\n\n    // Post screenshot data to the CLI automateScreenshot endpoint. If the endpoint responds with a build error,\n    // indicate that Percy has been disabled.\n    async function captureAutomateScreenshot(options, params) {\n      let query = params ? `?${new URLSearchParams(params)}` : '';\n      return await request.post(`/percy/automateScreenshot${query}`, options).catch(err => {\n        var _err$response, _err$response$body, _err$response$body$bu;\n        if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$body = _err$response.body) !== null && _err$response$body !== void 0 && (_err$response$body$bu = _err$response$body.build) !== null && _err$response$body$bu !== void 0 && _err$response$body$bu.error) {\n          info.enabled = false;\n        } else {\n          throw err;\n        }\n      });\n    }\n\n    var index = /*#__PURE__*/Object.freeze({\n      __proto__: null,\n      logger: logger,\n      percy: info,\n      request: request,\n      isPercyEnabled: isPercyEnabled,\n      waitForPercyIdle: waitForPercyIdle,\n      fetchPercyDOM: fetchPercyDOM,\n      postSnapshot: postSnapshot,\n      postComparison: postComparison,\n      flushSnapshots: flushSnapshots,\n      captureAutomateScreenshot: captureAutomateScreenshot,\n      postBuildEvents: postBuildEvents,\n      'default': index\n    });\n\n    exports.captureAutomateScreenshot = captureAutomateScreenshot;\n    exports[\"default\"] = index;\n    exports.fetchPercyDOM = fetchPercyDOM;\n    exports.flushSnapshots = flushSnapshots;\n    exports.isPercyEnabled = isPercyEnabled;\n    exports.logger = logger;\n    exports.percy = info;\n    exports.postBuildEvents = postBuildEvents;\n    exports.postComparison = postComparison;\n    exports.postSnapshot = postSnapshot;\n    exports.request = request;\n    exports.waitForPercyIdle = waitForPercyIdle;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n  })(this.PercySDKUtils = this.PercySDKUtils || {});\n}).call(window);\n\nif (typeof define === \"function\" && define.amd) {\n  define(\"@percy/sdk-utils\", [], () => window.PercySDKUtils);\n} else if (typeof module === \"object\" && module.exports) {\n  module.exports = window.PercySDKUtils;\n}\n\n})((function(){ function newDefine(){ var args = Array.prototype.slice.call(arguments); return define.apply(null, args); }; newDefine.amd = true; return newDefine; })());","function initializeQUnitConsoleGrouper(QUnit) {\n  QUnit.on('suiteStart', function (suiteInfo) {\n    start(suiteInfo.fullName, false);\n  });\n\n  QUnit.on('suiteEnd', function () {\n    end();\n  });\n\n  QUnit.on('testStart', function (testInfo) {\n    start(testInfo.fullName, true);\n  });\n\n  QUnit.on('testEnd', function () {\n    end();\n  });\n\n  var current_groups = [];\n\n  function start(fullName, isTest) {\n    var maxMatching = Math.min(current_groups.length, fullName.length);\n    var numMatching = 0;\n    while (numMatching <= maxMatching) {\n      if (current_groups[numMatching] === fullName[numMatching]) {\n        numMatching += 1;\n      } else {\n        break;\n      }\n    }\n\n    while (current_groups.length > numMatching) {\n      console.groupEnd();\n      current_groups.pop();\n    }\n\n    for (var i = numMatching; current_groups.length < fullName.length; i++) {\n      var name = fullName[i];\n      var groupName = 'Test Suite: ' + name;\n      if (isTest && i === fullName.length - 1) {\n        groupName = 'Test: ' + name;\n      }\n\n      console.group(groupName);\n      current_groups.push(name);\n    }\n  }\n\n  function end() {\n    console.groupEnd();\n    current_groups.pop();\n  }\n}\n\nif (window.QUnit) {\n  // if the QUnit global exists we initialize immediately\n  initializeQUnitConsoleGrouper(window.QUnit);\n} else {\n  // if the global is not yet available we try to initialize on the next tick\n  setTimeout(function () {\n    if (window.QUnit) {\n      initializeQUnitConsoleGrouper(window.QUnit);\n    } else {\n      // and if it's still not available we should a warning on the console instead\n      console.warn(\n        'Failed to automatically start qunit-console-grouper because the QUnit global is missing.'\n      );\n    }\n  }, 0);\n}\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvnzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACflEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbpVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;","file":"test-support.js"}